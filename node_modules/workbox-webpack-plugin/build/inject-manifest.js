<<<<<<< HEAD
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
  Copyright 2017 Google Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

var assert = require('assert');
var path = require('path');

var _require = require('workbox-build'),
    getManifest = _require.getManifest;

var convertStringToAsset = require('./lib/convert-string-to-asset');
var getDefaultConfig = require('./lib/get-default-config');
var formatManifestFilename = require('./lib/format-manifest-filename');
var getAssetHash = require('./lib/get-asset-hash');
var getManifestEntriesFromCompilation = require('./lib/get-manifest-entries-from-compilation');
var getWorkboxSWImports = require('./lib/get-workbox-sw-imports');
var readFileWrapper = require('./lib/read-file-wrapper');
var relativeToOutputPath = require('./lib/relative-to-output-path');
var sanitizeConfig = require('./lib/sanitize-config');
var stringifyManifest = require('./lib/stringify-manifest');
var warnAboutConfig = require('./lib/warn-about-config');

/**
 * This class supports taking an existing service worker file which already
 * uses Workbox, and injecting a reference to a [precache manifest]() into it,
 * allowing it to efficiently precache the assets created by a webpack build.
=======
"use strict";

/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
const {
  escapeRegExp
} = require('workbox-build/build/lib/escape-regexp');

const {
  replaceAndUpdateSourceMap
} = require('workbox-build/build/lib/replace-and-update-source-map');

const {
  validateWebpackInjectManifestOptions
} = require('workbox-build/build/lib/validate-options');

const prettyBytes = require('pretty-bytes');

const stringify = require('fast-json-stable-stringify');

const upath = require('upath');

const webpack = require('webpack');

const getManifestEntriesFromCompilation = require('./lib/get-manifest-entries-from-compilation');

const getSourcemapAssetName = require('./lib/get-sourcemap-asset-name');

const relativeToOutputPath = require('./lib/relative-to-output-path'); // Used to keep track of swDest files written by *any* instance of this plugin.
// See https://github.com/GoogleChrome/workbox/issues/2181


const _generatedAssetNames = new Set(); // SingleEntryPlugin in v4 was renamed to EntryPlugin in v5.


const SingleEntryPlugin = webpack.EntryPlugin || webpack.SingleEntryPlugin; // webpack v4/v5 compatibility:
// https://github.com/webpack/webpack/issues/11425#issuecomment-686607633

const {
  RawSource
} = webpack.sources || require('webpack-sources');
/**
 * This class supports compiling a service worker file provided via `swSrc`,
 * and injecting into that service worker a list of URLs and revision
 * information for precaching based on the webpack asset pipeline.
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0
 *
 * Use an instance of `InjectManifest` in the
 * [`plugins` array](https://webpack.js.org/concepts/plugins/#usage) of a
 * webpack config.
 *
<<<<<<< HEAD
 * @module workbox-webpack-plugin
 */

var InjectManifest = function () {
  /**
   * Creates an instance of InjectManifest.
   *
   * @param {Object} [config] See the
   * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin#configuration)
   * for all supported options and defaults.
   */
  function InjectManifest() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, InjectManifest);

    assert(typeof config.swSrc === 'string', `swSrc must be set to the path ` + `to an existing service worker file.`);

    this.config = (0, _assign2.default)(getDefaultConfig(), {
      // Default to using the same filename as the swSrc file, since that's
      // provided here. (In GenerateSW, that's not available.)
      swDest: path.basename(config.swSrc)
    }, config);
  }

  /**
   * @param {Object} compilation The webpack compilation.
   * @param {Function} readFile The function to use when reading files,
   * derived from compiler.inputFileSystem.
=======
 * @memberof module:workbox-webpack-plugin
 */


class InjectManifest {
  // eslint-disable-next-line jsdoc/newline-after-description

  /**
   * Creates an instance of InjectManifest.
   *
   * @param {Object} config The configuration to use.
   *
   * @param {string} config.swSrc An existing service worker file that will be
   * compiled and have a precache manifest injected into it.
   *
   * @param {Array<module:workbox-build.ManifestEntry>} [config.additionalManifestEntries]
   * A list of entries to be precached, in addition to any entries that are
   * generated as part of the build configuration.
   *
   * @param {Array<string>} [config.chunks] One or more chunk names whose corresponding
   * output files should be included in the precache manifest.
   *
   * @param {boolean} [config.compileSrc=true] When `true` (the default), the
   * `swSrc` file will be compiled by webpack. When `false`, compilation will
   * not occur (and `webpackCompilationPlugins` can't be used.) Set to `false`
   * if you want to inject the manifest into, e.g., a JSON file.
   *
   * @param {RegExp} [config.dontCacheBustURLsMatching] Assets that match this will be
   * assumed to be uniquely versioned via their URL, and exempted from the normal
   * HTTP cache-busting that's done when populating the precache. (As of Workbox
   * v6, this option is usually not needed, as each
   * [asset's metadata](https://github.com/webpack/webpack/issues/9038) is used
   * to determine whether it's immutable or not.)
   *
   * @param {Array<string|RegExp|Function>} [config.exclude=[/\.map$/, /^manifest.*\.js$]]
   * One or more specifiers used to exclude assets from the precache manifest.
   * This is interpreted following
   * [the same rules](https://webpack.js.org/configuration/module/#condition)
   * as `webpack`'s standard `exclude` option.
   *
   * @param {Array<string>} [config.excludeChunks] One or more chunk names whose
   * corresponding output files should be excluded from the precache manifest.
   *
   * @param {Array<string|RegExp|Function>} [config.include]
   * One or more specifiers used to include assets in the precache manifest.
   * This is interpreted following
   * [the same rules](https://webpack.js.org/configuration/module/#condition)
   * as `webpack`'s standard `include` option.
   *
   * @param  {string} [config.injectionPoint='self.__WB_MANIFEST'] The string to
   * find inside of the `swSrc` file. Once found, it will be replaced by the
   * generated precache manifest.
   *
   * @param {Array<module:workbox-build.ManifestTransform>} [config.manifestTransforms]
   * One or more functions which will be applied sequentially against the
   * generated manifest. If `modifyURLPrefix` or `dontCacheBustURLsMatching` are
   * also specified, their corresponding transformations will be applied first.
   *
   * @param {number} [config.maximumFileSizeToCacheInBytes=2097152] This value can be
   * used to determine the maximum size of files that will be precached. This
   * prevents you from inadvertently precaching very large files that might have
   * accidentally matched one of your patterns.
   *
   * @param {string} [config.mode] If set to 'production', then an optimized service
   * worker bundle that excludes debugging info will be produced. If not explicitly
   * configured here, the `mode` value configured in the current `webpack`
   * compilation will be used.
   *
   * @param {object<string, string>} [config.modifyURLPrefix] A mapping of prefixes
   * that, if present in an entry in the precache manifest, will be replaced with
   * the corresponding value. This can be used to, for example, remove or add a
   * path prefix from a manifest entry if your web hosting setup doesn't match
   * your local filesystem setup. As an alternative with more flexibility, you can
   * use the `manifestTransforms` option and provide a function that modifies the
   * entries in the manifest using whatever logic you provide.
   *
   * @param {string} [config.swDest] The asset name of the
   * service worker file that will be created by this plugin. If omitted, the
   * name will be based on the `swSrc` name.
   *
   * @param {Array<Object>} [config.webpackCompilationPlugins] Optional `webpack`
   * plugins that will be used when compiling the `swSrc` input file.
   */
  constructor(config = {}) {
    this.config = config;
    this.alreadyCalled = false;
  }
  /**
   * @param {Object} [compiler] default compiler object passed from webpack
   *
   * @private
   */


  propagateWebpackConfig(compiler) {
    // Because this.config is listed last, properties that are already set
    // there take precedence over derived properties from the compiler.
    this.config = Object.assign({
      mode: compiler.mode,
      // Use swSrc with a hardcoded .js extension, in case swSrc is a .ts file.
      swDest: upath.parse(this.config.swSrc).name + '.js'
    }, this.config);
  }
  /**
   * @param {Object} [compiler] default compiler object passed from webpack
   *
   * @private
   */


  apply(compiler) {
    this.propagateWebpackConfig(compiler);
    compiler.hooks.make.tapPromise(this.constructor.name, compilation => this.handleMake(compilation, compiler).catch(error => compilation.errors.push(error))); // webpack v4/v5 compatibility:
    // https://github.com/webpack/webpack/issues/11425#issuecomment-690387207

    if (webpack.version.startsWith('4.')) {
      compiler.hooks.emit.tapPromise(this.constructor.name, compilation => this.addAssets(compilation).catch(error => compilation.errors.push(error)));
    } else {
      const {
        PROCESS_ASSETS_STAGE_OPTIMIZE_TRANSFER
      } = webpack.Compilation; // Specifically hook into thisCompilation, as per
      // https://github.com/webpack/webpack/issues/11425#issuecomment-690547848

      compiler.hooks.thisCompilation.tap(this.constructor.name, compilation => {
        compilation.hooks.processAssets.tapPromise({
          name: this.constructor.name,
          // TODO(jeffposnick): This may need to change eventually.
          // See https://github.com/webpack/webpack/issues/11822#issuecomment-726184972
          stage: PROCESS_ASSETS_STAGE_OPTIMIZE_TRANSFER - 10
        }, () => this.addAssets(compilation).catch(error => compilation.errors.push(error)));
      });
    }
  }
  /**
   * @param {Object} compilation The webpack compilation.
   * @param {Object} parentCompiler The webpack parent compiler.
   *
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0
   * @private
   */


<<<<<<< HEAD
  (0, _createClass3.default)(InjectManifest, [{
    key: 'handleEmit',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(compilation, readFile) {
        var configWarning, workboxSWImports, modulePathPrefix, entries, importScriptsArray, sanitizedConfig, _ref2, manifestEntries, warnings, manifestString, manifestAsset, manifestHash, manifestFilename, pathToManifestFile, originalSWString, absoluteSwSrc, importScriptsString, setConfigString, postInjectionSWString, relSwDest;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                configWarning = warnAboutConfig(this.config);

                if (configWarning) {
                  compilation.warnings.push(configWarning);
                }

                _context.next = 4;
                return getWorkboxSWImports(compilation, this.config);

              case 4:
                workboxSWImports = _context.sent;


                // this.config.modulePathPrefix may or may not have been set by
                // getWorkboxSWImports(), depending on the other config options. If it was
                // set, we need to pull it out and make use of it later, as it can't be
                // used by the underlying workbox-build getManifest() method.
                modulePathPrefix = this.config.modulePathPrefix;

                delete this.config.modulePathPrefix;

                entries = getManifestEntriesFromCompilation(compilation, this.config);
                importScriptsArray = [].concat(this.config.importScripts);
                sanitizedConfig = sanitizeConfig.forGetManifest(this.config);
                // If there are any "extra" config options remaining after we remove the
                // ones that are used natively by the plugin, then assume that they should
                // be passed on to workbox-build.getManifest() to generate extra entries.

                if (!((0, _keys2.default)(sanitizedConfig).length > 0)) {
                  _context.next = 19;
                  break;
                }

                // If globPatterns isn't explicitly set, then default to [], instead of
                // the workbox-build.getManifest() default.
                sanitizedConfig.globPatterns = sanitizedConfig.globPatterns || [];

                _context.next = 14;
                return getManifest(sanitizedConfig);

              case 14:
                _ref2 = _context.sent;
                manifestEntries = _ref2.manifestEntries;
                warnings = _ref2.warnings;

                compilation.warnings = compilation.warnings.concat(warnings || []);
                entries = entries.concat(manifestEntries);

              case 19:
                manifestString = stringifyManifest(entries);
                manifestAsset = convertStringToAsset(manifestString);
                manifestHash = getAssetHash(manifestAsset);
                manifestFilename = formatManifestFilename(this.config.precacheManifestFilename, manifestHash);
                pathToManifestFile = relativeToOutputPath(compilation, path.join(this.config.importsDirectory, manifestFilename));

                compilation.assets[pathToManifestFile] = manifestAsset;

                importScriptsArray.push((compilation.options.output.publicPath || '') + pathToManifestFile.split(path.sep).join('/'));

                // workboxSWImports might be null if importWorkboxFrom is 'disabled'.
                if (workboxSWImports) {
                  importScriptsArray.push.apply(importScriptsArray, (0, _toConsumableArray3.default)(workboxSWImports));
                }

                _context.next = 29;
                return readFileWrapper(readFile, this.config.swSrc);

              case 29:
                originalSWString = _context.sent;


                // compilation.fileDependencies needs absolute paths.
                absoluteSwSrc = path.resolve(this.config.swSrc);

                if (Array.isArray(compilation.fileDependencies)) {
                  // webpack v3
                  if (compilation.fileDependencies.indexOf(absoluteSwSrc) === -1) {
                    compilation.fileDependencies.push(absoluteSwSrc);
                  }
                } else if ('add' in compilation.fileDependencies) {
                  // webpack v4; no need to check for membership first, since it's a Set.
                  compilation.fileDependencies.add(absoluteSwSrc);
                }

                importScriptsString = importScriptsArray.map(_stringify2.default).join(', ');
                setConfigString = modulePathPrefix ? `workbox.setConfig({modulePathPrefix: ` + `${(0, _stringify2.default)(modulePathPrefix)}});` : '';
                postInjectionSWString = `importScripts(${importScriptsString});
${setConfigString}
${originalSWString}
`;
                relSwDest = relativeToOutputPath(compilation, this.config.swDest);

                compilation.assets[relSwDest] = convertStringToAsset(postInjectionSWString);

              case 37:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function handleEmit(_x2, _x3) {
        return _ref.apply(this, arguments);
      }

      return handleEmit;
    }()

    /**
     * @param {Object} [compiler] default compiler object passed from webpack
     *
     * @private
     */

  }, {
    key: 'apply',
    value: function apply(compiler) {
      var _this = this;

      var readFile = compiler.inputFileSystem.readFile.bind(compiler.inputFileSystem);
      if ('hooks' in compiler) {
        // We're in webpack 4+.
        compiler.hooks.emit.tapPromise(this.constructor.name, function (compilation) {
          return _this.handleEmit(compilation, readFile);
        });
      } else {
        // We're in webpack 2 or 3.
        compiler.plugin('emit', function (compilation, callback) {
          _this.handleEmit(compilation, readFile).then(callback).catch(callback);
        });
      }
    }
  }]);
  return InjectManifest;
}();
=======
  async performChildCompilation(compilation, parentCompiler) {
    const outputOptions = {
      path: parentCompiler.options.output.path,
      filename: this.config.swDest
    };
    const childCompiler = compilation.createChildCompiler(this.constructor.name, outputOptions);
    childCompiler.context = parentCompiler.context;
    childCompiler.inputFileSystem = parentCompiler.inputFileSystem;
    childCompiler.outputFileSystem = parentCompiler.outputFileSystem;

    if (Array.isArray(this.config.webpackCompilationPlugins)) {
      for (const plugin of this.config.webpackCompilationPlugins) {
        plugin.apply(childCompiler);
      }
    }

    new SingleEntryPlugin(parentCompiler.context, this.config.swSrc, this.constructor.name).apply(childCompiler);
    await new Promise((resolve, reject) => {
      childCompiler.runAsChild((error, entries, childCompilation) => {
        if (error) {
          reject(error);
        } else {
          compilation.warnings = compilation.warnings.concat(childCompilation.warnings);
          compilation.errors = compilation.errors.concat(childCompilation.errors);
          resolve();
        }
      });
    });
  }
  /**
   * @param {Object} compilation The webpack compilation.
   * @param {Object} parentCompiler The webpack parent compiler.
   *
   * @private
   */


  addSrcToAssets(compilation, parentCompiler) {
    const source = parentCompiler.inputFileSystem.readFileSync(this.config.swSrc).toString();
    compilation.emitAsset(this.config.swDest, new RawSource(source));
  }
  /**
   * @param {Object} compilation The webpack compilation.
   * @param {Object} parentCompiler The webpack parent compiler.
   *
   * @private
   */


  async handleMake(compilation, parentCompiler) {
    try {
      this.config = validateWebpackInjectManifestOptions(this.config);
    } catch (error) {
      throw new Error(`Please check your ${this.constructor.name} plugin ` + `configuration:\n${error.message}`);
    }

    this.config.swDest = relativeToOutputPath(compilation, this.config.swDest);

    _generatedAssetNames.add(this.config.swDest);

    if (this.config.compileSrc) {
      await this.performChildCompilation(compilation, parentCompiler);
    } else {
      this.addSrcToAssets(compilation, parentCompiler); // This used to be a fatal error, but just warn at runtime because we
      // can't validate it easily.

      if (Array.isArray(this.config.webpackCompilationPlugins) && this.config.webpackCompilationPlugins.length > 0) {
        compilation.warnings.push(new Error('compileSrc is false, so the ' + 'webpackCompilationPlugins option will be ignored.'));
      }
    }
  }
  /**
   * @param {Object} compilation The webpack compilation.
   *
   * @private
   */


  async addAssets(compilation) {
    // See https://github.com/GoogleChrome/workbox/issues/1790
    if (this.alreadyCalled) {
      const warningMessage = `${this.constructor.name} has been called ` + `multiple times, perhaps due to running webpack in --watch mode. The ` + `precache manifest generated after the first call may be inaccurate! ` + `Please see https://github.com/GoogleChrome/workbox/issues/1790 for ` + `more information.`;

      if (!compilation.warnings.some(warning => warning instanceof Error && warning.message === warningMessage)) {
        compilation.warnings.push(new Error(warningMessage));
      }
    } else {
      this.alreadyCalled = true;
    }

    const config = Object.assign({}, this.config); // Ensure that we don't precache any of the assets generated by *any*
    // instance of this plugin.

    config.exclude.push(({
      asset
    }) => _generatedAssetNames.has(asset.name)); // See https://webpack.js.org/contribute/plugin-patterns/#monitoring-the-watch-graph

    const absoluteSwSrc = upath.resolve(this.config.swSrc);
    compilation.fileDependencies.add(absoluteSwSrc);
    const swAsset = compilation.getAsset(config.swDest);
    const swAssetString = swAsset.source.source();
    const globalRegexp = new RegExp(escapeRegExp(config.injectionPoint), 'g');
    const injectionResults = swAssetString.match(globalRegexp);

    if (!injectionResults) {
      throw new Error(`Can't find ${config.injectionPoint} in your SW source.`);
    }

    if (injectionResults.length !== 1) {
      throw new Error(`Multiple instances of ${config.injectionPoint} were ` + `found in your SW source. Include it only once. For more info, see ` + `https://github.com/GoogleChrome/workbox/issues/2681`);
    }

    const {
      size,
      sortedEntries
    } = await getManifestEntriesFromCompilation(compilation, config);
    let manifestString = stringify(sortedEntries);

    if (this.config.compileSrc && // See https://github.com/GoogleChrome/workbox/issues/2729
    // (TODO: Switch to ?. once our linter supports it.)
    !(compilation.options && compilation.options.devtool === 'eval-cheap-source-map' && compilation.options.optimization && compilation.options.optimization.minimize)) {
      // See https://github.com/GoogleChrome/workbox/issues/2263
      manifestString = manifestString.replace(/"/g, `'`);
    }

    const sourcemapAssetName = getSourcemapAssetName(compilation, swAssetString, config.swDest);

    if (sourcemapAssetName) {
      _generatedAssetNames.add(sourcemapAssetName);

      const sourcemapAsset = compilation.getAsset(sourcemapAssetName);
      const {
        source,
        map
      } = await replaceAndUpdateSourceMap({
        jsFilename: config.swDest,
        originalMap: JSON.parse(sourcemapAsset.source.source()),
        originalSource: swAssetString,
        replaceString: manifestString,
        searchString: config.injectionPoint
      });
      compilation.updateAsset(sourcemapAssetName, new RawSource(map));
      compilation.updateAsset(config.swDest, new RawSource(source));
    } else {
      // If there's no sourcemap associated with swDest, a simple string
      // replacement will suffice.
      compilation.updateAsset(config.swDest, new RawSource(swAssetString.replace(config.injectionPoint, manifestString)));
    }

    if (compilation.getLogger) {
      const logger = compilation.getLogger(this.constructor.name);
      logger.info(`The service worker at ${config.swDest} will precache
        ${sortedEntries.length} URLs, totaling ${prettyBytes(size)}.`);
    }
  }

}
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0

module.exports = InjectManifest;