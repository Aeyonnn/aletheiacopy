/**
 * @fileoverview Rule to disallow whitespace before properties
 * @author Kai Cataldo
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

<<<<<<< HEAD
const astUtils = require("../util/ast-utils");
=======
const astUtils = require("./utils/ast-utils");
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

<<<<<<< HEAD
module.exports = {
    meta: {
        docs: {
            description: "disallow whitespace before properties",
            category: "Stylistic Issues",
=======
/** @type {import('../shared/types').Rule} */
module.exports = {
    meta: {
        type: "layout",

        docs: {
            description: "disallow whitespace before properties",
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0
            recommended: false,
            url: "https://eslint.org/docs/rules/no-whitespace-before-property"
        },

        fixable: "whitespace",
<<<<<<< HEAD
        schema: []
=======
        schema: [],

        messages: {
            unexpectedWhitespace: "Unexpected whitespace before property {{propName}}."
        }
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0
    },

    create(context) {
        const sourceCode = context.getSourceCode();

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        /**
         * Reports whitespace before property token
<<<<<<< HEAD
         * @param {ASTNode} node - the node to report in the event of an error
         * @param {Token} leftToken - the left token
         * @param {Token} rightToken - the right token
=======
         * @param {ASTNode} node the node to report in the event of an error
         * @param {Token} leftToken the left token
         * @param {Token} rightToken the right token
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0
         * @returns {void}
         * @private
         */
        function reportError(node, leftToken, rightToken) {
<<<<<<< HEAD
            const replacementText = node.computed ? "" : ".";

            context.report({
                node,
                message: "Unexpected whitespace before property {{propName}}.",
=======
            context.report({
                node,
                messageId: "unexpectedWhitespace",
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0
                data: {
                    propName: sourceCode.getText(node.property)
                },
                fix(fixer) {
<<<<<<< HEAD
                    if (!node.computed && astUtils.isDecimalInteger(node.object)) {
=======
                    let replacementText = "";

                    if (!node.computed && !node.optional && astUtils.isDecimalInteger(node.object)) {
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0

                        /*
                         * If the object is a number literal, fixing it to something like 5.toString() would cause a SyntaxError.
                         * Don't fix this case.
                         */
                        return null;
                    }
<<<<<<< HEAD
=======

                    // Don't fix if comments exist.
                    if (sourceCode.commentsExistBetween(leftToken, rightToken)) {
                        return null;
                    }

                    if (node.optional) {
                        replacementText = "?.";
                    } else if (!node.computed) {
                        replacementText = ".";
                    }

>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0
                    return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], replacementText);
                }
            });
        }

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return {
            MemberExpression(node) {
                let rightToken;
                let leftToken;

                if (!astUtils.isTokenOnSameLine(node.object, node.property)) {
                    return;
                }

                if (node.computed) {
                    rightToken = sourceCode.getTokenBefore(node.property, astUtils.isOpeningBracketToken);
<<<<<<< HEAD
                    leftToken = sourceCode.getTokenBefore(rightToken);
=======
                    leftToken = sourceCode.getTokenBefore(rightToken, node.optional ? 1 : 0);
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0
                } else {
                    rightToken = sourceCode.getFirstToken(node.property);
                    leftToken = sourceCode.getTokenBefore(rightToken, 1);
                }

                if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {
                    reportError(node, leftToken, rightToken);
                }
            }
        };
    }
};
