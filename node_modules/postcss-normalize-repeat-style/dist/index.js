<<<<<<< HEAD
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _postcssValueParser = require('postcss-value-parser');

var _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);

var _cssnanoUtilGetArguments = require('cssnano-util-get-arguments');

var _cssnanoUtilGetArguments2 = _interopRequireDefault(_cssnanoUtilGetArguments);

var _cssnanoUtilGetMatch = require('cssnano-util-get-match');

var _cssnanoUtilGetMatch2 = _interopRequireDefault(_cssnanoUtilGetMatch);

var _map = require('./lib/map');

var _map2 = _interopRequireDefault(_map);
=======
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _postcssValueParser = _interopRequireDefault(require("postcss-value-parser"));

var _map = _interopRequireDefault(require("./lib/map"));
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function evenValues(list, index) {
<<<<<<< HEAD
    return index % 2 === 0;
}

const repeatKeywords = _map2.default.map(mapping => mapping[0]);

const getMatch = (0, _cssnanoUtilGetMatch2.default)(_map2.default);

exports.default = _postcss2.default.plugin('postcss-normalize-repeat-style', () => {
    return css => {
        const cache = {};

        css.walkDecls(/background(-repeat)?|(-webkit-)?mask-repeat/i, decl => {
            const value = decl.value;

            if (cache[value]) {
                decl.value = cache[value];

                return;
            }

            const parsed = (0, _postcssValueParser2.default)(value);

            if (parsed.nodes.length === 1) {
                cache[value] = value;

                return;
            }

            const args = (0, _cssnanoUtilGetArguments2.default)(parsed);
            const relevant = [];

            args.forEach(arg => {
                relevant.push({
                    start: null,
                    end: null
                });

                arg.forEach((part, index) => {
                    const isRepeat = ~repeatKeywords.indexOf(part.value.toLowerCase());
                    const len = relevant.length - 1;

                    if (relevant[len].start === null && isRepeat) {
                        relevant[len].start = index;
                        relevant[len].end = index;

                        return;
                    }

                    if (relevant[len].start !== null) {
                        if (part.type === 'space') {
                            return;
                        } else if (isRepeat) {
                            relevant[len].end = index;

                            return;
                        }

                        return;
                    }
                });
            });

            relevant.forEach((range, index) => {
                if (range.start === null) {
                    return;
                }

                const val = args[index].slice(range.start, range.end + 1);

                if (val.length !== 3) {
                    return;
                }

                const match = getMatch(val.filter(evenValues).map(n => n.value.toLowerCase()));

                if (match) {
                    args[index][range.start].value = match;
                    args[index][range.start + 1].value = '';
                    args[index][range.end].value = '';
                }
            });

            const result = parsed.toString();

            decl.value = result;
            cache[value] = result;
        });
    };
});
module.exports = exports['default'];
=======
  return index % 2 === 0;
}

const repeatKeywords = new Set(_map.default.values());

function isCommaNode(node) {
  return node.type === 'div' && node.value === ',';
}

function isVariableFunctionNode(node) {
  if (node.type !== 'function') {
    return false;
  }

  return ['var', 'env'].includes(node.value.toLowerCase());
}

function transform(value) {
  const parsed = (0, _postcssValueParser.default)(value);

  if (parsed.nodes.length === 1) {
    return value;
  }

  const ranges = [];
  let rangeIndex = 0;
  let shouldContinue = true;
  parsed.nodes.forEach((node, index) => {
    // After comma (`,`) follows next background
    if (isCommaNode(node)) {
      rangeIndex += 1;
      shouldContinue = true;
      return;
    }

    if (!shouldContinue) {
      return;
    } // After separator (`/`) follows `background-size` values
    // Avoid them


    if (node.type === 'div' && node.value === '/') {
      shouldContinue = false;
      return;
    }

    if (!ranges[rangeIndex]) {
      ranges[rangeIndex] = {
        start: null,
        end: null
      };
    } // Do not try to be processed `var and `env` function inside background


    if (isVariableFunctionNode(node)) {
      shouldContinue = false;
      ranges[rangeIndex].start = null;
      ranges[rangeIndex].end = null;
      return;
    }

    const isRepeatKeyword = node.type === 'word' && repeatKeywords.has(node.value.toLowerCase());

    if (ranges[rangeIndex].start === null && isRepeatKeyword) {
      ranges[rangeIndex].start = index;
      ranges[rangeIndex].end = index;
      return;
    }

    if (ranges[rangeIndex].start !== null) {
      if (node.type === 'space') {
        return;
      } else if (isRepeatKeyword) {
        ranges[rangeIndex].end = index;
        return;
      }

      return;
    }
  });
  ranges.forEach(range => {
    if (range.start === null) {
      return;
    }

    const nodes = parsed.nodes.slice(range.start, range.end + 1);

    if (nodes.length !== 3) {
      return;
    }

    const key = nodes.filter(evenValues).map(n => n.value.toLowerCase()).toString();

    const match = _map.default.get(key);

    if (match) {
      nodes[0].value = match;
      nodes[1].value = nodes[2].value = '';
    }
  });
  return parsed.toString();
}

function pluginCreator() {
  return {
    postcssPlugin: 'postcss-normalize-repeat-style',

    prepare() {
      const cache = new Map();
      return {
        OnceExit(css) {
          css.walkDecls(/^(background(-repeat)?|(-\w+-)?mask-repeat)$/i, decl => {
            const value = decl.value;

            if (!value) {
              return;
            }

            if (cache.has(value)) {
              decl.value = cache.get(value);
              return;
            }

            const result = transform(value);
            decl.value = result;
            cache.set(value, result);
          });
        }

      };
    }

  };
}

pluginCreator.postcss = true;
var _default = pluginCreator;
exports.default = _default;
module.exports = exports.default;
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0
