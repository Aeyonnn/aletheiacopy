/**
 * @fileoverview Prevent multiple component definition per file
 * @author Yannick Croissant
 */
<<<<<<< HEAD
'use strict';

const has = require('has');
const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');
=======

'use strict';

const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');
const report = require('../util/report');
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

<<<<<<< HEAD
=======
const messages = {
  onlyOneComponent: 'Declare only one React component per file',
};

>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0
module.exports = {
  meta: {
    docs: {
      description: 'Prevent multiple component definition per file',
      category: 'Stylistic Issues',
      recommended: false,
<<<<<<< HEAD
      url: docsUrl('no-multi-comp')
    },

=======
      url: docsUrl('no-multi-comp'),
    },

    messages,

>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0
    schema: [{
      type: 'object',
      properties: {
        ignoreStateless: {
          default: false,
<<<<<<< HEAD
          type: 'boolean'
        }
      },
      additionalProperties: false
    }]
  },

  create: Components.detect((context, components) => {
    const configuration = context.options[0] || {};
    const ignoreStateless = configuration.ignoreStateless || false;

    const MULTI_COMP_MESSAGE = 'Declare only one React component per file';

=======
          type: 'boolean',
        },
      },
      additionalProperties: false,
    }],
  },

  create: Components.detect((context, components, utils) => {
    const configuration = context.options[0] || {};
    const ignoreStateless = configuration.ignoreStateless || false;

>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0
    /**
     * Checks if the component is ignored
     * @param {Object} component The component being checked.
     * @returns {Boolean} True if the component is ignored, false if not.
     */
    function isIgnored(component) {
<<<<<<< HEAD
      return ignoreStateless && /Function/.test(component.node.type);
    }

    // --------------------------------------------------------------------------
    // Public
    // --------------------------------------------------------------------------

    return {
      'Program:exit': function() {
=======
      return (
        ignoreStateless && (
          /Function/.test(component.node.type)
          || utils.isPragmaComponentWrapper(component.node)
        )
      );
    }

    return {
      'Program:exit'() {
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0
        if (components.length() <= 1) {
          return;
        }

        const list = components.list();
<<<<<<< HEAD
        let i = 0;

        for (const component in list) {
          if (!has(list, component) || isIgnored(list[component]) || ++i === 1) {
            continue;
          }
          context.report({
            node: list[component].node,
            message: MULTI_COMP_MESSAGE
          });
        }
      }
    };
  })
=======

        Object.keys(list).filter((component) => !isIgnored(list[component])).forEach((component, i) => {
          if (i >= 1) {
            report(context, messages.onlyOneComponent, 'onlyOneComponent', {
              node: list[component].node,
            });
          }
        });
      },
    };
  }),
>>>>>>> d9d57759386cbc64761f26a577729c9da898f4b0
};
