{"ast":null,"code":"import { __assign, __spreadArray, __read, __values, __rest } from './_virtual/_tslib.js';\nimport { isFunction, mapValues, isArray, flatten, toArray, toStateValue, isString, getEventType, toSCXMLEvent, matchesState, path, evaluateGuard, mapContext, pathToStateValue, isBuiltInEvent, partition, updateHistoryValue, toStatePath, mapFilterValues, warn, toStatePaths, nestedPath, normalizeTarget, toGuard, toTransitionConfigArray, isMachine, createInvokeId } from './utils.js';\nimport { SpecialTargets } from './types.js';\nimport { State, stateValuesEqual } from './State.js';\nimport { start as start$1, stop as stop$1, raise as raise$1, send, invoke, update, nullEvent } from './actionTypes.js';\nimport { done, start, raise, stop, toActionObjects, resolveActions, doneInvoke, error, toActionObject, toActivityDefinition, after, send as send$1, cancel, initEvent } from './actions.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { STATE_DELIMITER } from './constants.js';\nimport { getAllStateNodes, getConfiguration, isInFinalState, getTagsFromConfiguration, has, getChildren, getValue, isLeafNode } from './stateUtils.js';\nimport { createInvocableActor } from './Actor.js';\nimport { toInvokeDefinition } from './invokeUtils.js';\nvar NULL_EVENT = '';\nvar STATE_IDENTIFIER = '#';\nvar WILDCARD = '*';\nvar EMPTY_OBJECT = {};\n\nvar isStateId = function (str) {\n  return str[0] === STATE_IDENTIFIER;\n};\n\nvar createDefaultOptions = function () {\n  return {\n    actions: {},\n    guards: {},\n    services: {},\n    activities: {},\n    delays: {}\n  };\n};\n\nvar validateArrayifiedTransitions = function (stateNode, event, transitions) {\n  var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {\n    return !('cond' in transition) && !('in' in transition) && (isString(transition.target) || isMachine(transition.target));\n  });\n  var eventText = event === NULL_EVENT ? 'the transient event' : \"event '\".concat(event, \"'\");\n  warn(!hasNonLastUnguardedTarget, \"One or more transitions for \".concat(eventText, \" on state '\").concat(stateNode.id, \"' are unreachable. \") + \"Make sure that the default transition is the last one defined.\");\n};\n\nvar StateNode =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  function StateNode(\n  /**\r\n   * The raw config used to create the machine.\r\n   */\n  config, options,\n  /**\r\n   * The initial extended state\r\n   */\n  _context, // TODO: this is unsafe, but we're removing it in v5 anyway\n  _stateInfo) {\n    var _this = this;\n\n    if (_context === void 0) {\n      _context = 'context' in config ? config.context : undefined;\n    }\n\n    var _a;\n\n    this.config = config;\n    this._context = _context;\n    /**\r\n     * The order this state node appears. Corresponds to the implicit SCXML document order.\r\n     */\n\n    this.order = -1;\n    this.__xstatenode = true;\n    this.__cache = {\n      events: undefined,\n      relativeValue: new Map(),\n      initialStateValue: undefined,\n      initialState: undefined,\n      on: undefined,\n      transitions: undefined,\n      candidates: {},\n      delayedTransitions: undefined\n    };\n    this.idMap = {};\n    this.tags = [];\n    this.options = Object.assign(createDefaultOptions(), options);\n    this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;\n    this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || '(machine)';\n    this.machine = this.parent ? this.parent.machine : this;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);\n    this.id = this.config.id || __spreadArray([this.machine.key], __read(this.path), false).join(this.delimiter);\n    this.version = this.parent ? this.parent.version : this.config.version;\n    this.type = this.config.type || (this.config.parallel ? 'parallel' : this.config.states && Object.keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');\n    this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};\n    this.description = this.config.description;\n\n    if (!IS_PRODUCTION) {\n      warn(!('parallel' in this.config), \"The \\\"parallel\\\" property is deprecated and will be removed in version 4.1. \".concat(this.config.parallel ? \"Replace with `type: 'parallel'`\" : \"Use `type: '\".concat(this.type, \"'`\"), \" in the config for state node '\").concat(this.id, \"' instead.\"));\n    }\n\n    this.initial = this.config.initial;\n    this.states = this.config.states ? mapValues(this.config.states, function (stateConfig, key) {\n      var _a;\n\n      var stateNode = new StateNode(stateConfig, {}, undefined, {\n        parent: _this,\n        key: key\n      });\n      Object.assign(_this.idMap, __assign((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));\n      return stateNode;\n    }) : EMPTY_OBJECT; // Document order\n\n    var order = 0;\n\n    function dfs(stateNode) {\n      var e_1, _a;\n\n      stateNode.order = order++;\n\n      try {\n        for (var _b = __values(getChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n          dfs(child);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    dfs(this); // History config\n\n    this.history = this.config.history === true ? 'shallow' : this.config.history || false;\n    this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function (_a) {\n      var event = _a.event;\n      return event === NULL_EVENT;\n    }) : NULL_EVENT in this.config.on);\n    this.strict = !!this.config.strict; // TODO: deprecate (entry)\n\n    this.onEntry = toArray(this.config.entry || this.config.onEntry).map(function (action) {\n      return toActionObject(action);\n    }); // TODO: deprecate (exit)\n\n    this.onExit = toArray(this.config.exit || this.config.onExit).map(function (action) {\n      return toActionObject(action);\n    });\n    this.meta = this.config.meta;\n    this.doneData = this.type === 'final' ? this.config.data : undefined;\n    this.invoke = toArray(this.config.invoke).map(function (invokeConfig, i) {\n      var _a, _b;\n\n      if (isMachine(invokeConfig)) {\n        var invokeId = createInvokeId(_this.id, i);\n        _this.machine.options.services = __assign((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);\n        return toInvokeDefinition({\n          src: invokeId,\n          id: invokeId\n        });\n      } else if (isString(invokeConfig.src)) {\n        var invokeId = invokeConfig.id || createInvokeId(_this.id, i);\n        return toInvokeDefinition(__assign(__assign({}, invokeConfig), {\n          id: invokeId,\n          src: invokeConfig.src\n        }));\n      } else if (isMachine(invokeConfig.src) || isFunction(invokeConfig.src)) {\n        var invokeId = invokeConfig.id || createInvokeId(_this.id, i);\n        _this.machine.options.services = __assign((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);\n        return toInvokeDefinition(__assign(__assign({\n          id: invokeId\n        }, invokeConfig), {\n          src: invokeId\n        }));\n      } else {\n        var invokeSource = invokeConfig.src;\n        return toInvokeDefinition(__assign(__assign({\n          id: createInvokeId(_this.id, i)\n        }, invokeConfig), {\n          src: invokeSource\n        }));\n      }\n    });\n    this.activities = toArray(this.config.activities).concat(this.invoke).map(function (activity) {\n      return toActivityDefinition(activity);\n    });\n    this.transition = this.transition.bind(this);\n    this.tags = toArray(this.config.tags); // TODO: this is the real fix for initialization once\n    // state node getters are deprecated\n    // if (!this.parent) {\n    //   this._init();\n    // }\n  }\n\n  StateNode.prototype._init = function () {\n    if (this.__cache.transitions) {\n      return;\n    }\n\n    getAllStateNodes(this).forEach(function (stateNode) {\n      return stateNode.on;\n    });\n  };\n  /**\r\n   * Clones this state machine with custom options and context.\r\n   *\r\n   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.\r\n   * @param context Custom context (will override predefined context)\r\n   */\n\n\n  StateNode.prototype.withConfig = function (options, context) {\n    var _a = this.options,\n        actions = _a.actions,\n        activities = _a.activities,\n        guards = _a.guards,\n        services = _a.services,\n        delays = _a.delays;\n    return new StateNode(this.config, {\n      actions: __assign(__assign({}, actions), options.actions),\n      activities: __assign(__assign({}, activities), options.activities),\n      guards: __assign(__assign({}, guards), options.guards),\n      services: __assign(__assign({}, services), options.services),\n      delays: __assign(__assign({}, delays), options.delays)\n    }, context !== null && context !== void 0 ? context : this.context);\n  };\n  /**\r\n   * Clones this state machine with custom context.\r\n   *\r\n   * @param context Custom context (will override predefined context, not recursive)\r\n   */\n\n\n  StateNode.prototype.withContext = function (context) {\n    return new StateNode(this.config, this.options, context);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"context\", {\n    get: function () {\n      return isFunction(this._context) ? this._context() : this._context;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"definition\", {\n    /**\r\n     * The well-structured state node definition.\r\n     */\n    get: function () {\n      return {\n        id: this.id,\n        key: this.key,\n        version: this.version,\n        context: this.context,\n        type: this.type,\n        initial: this.initial,\n        history: this.history,\n        states: mapValues(this.states, function (state) {\n          return state.definition;\n        }),\n        on: this.on,\n        transitions: this.transitions,\n        entry: this.onEntry,\n        exit: this.onExit,\n        activities: this.activities || [],\n        meta: this.meta,\n        order: this.order || -1,\n        data: this.doneData,\n        invoke: this.invoke,\n        description: this.description,\n        tags: this.tags\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.toJSON = function () {\n    return this.definition;\n  };\n\n  Object.defineProperty(StateNode.prototype, \"on\", {\n    /**\r\n     * The mapping of events to transitions.\r\n     */\n    get: function () {\n      if (this.__cache.on) {\n        return this.__cache.on;\n      }\n\n      var transitions = this.transitions;\n      return this.__cache.on = transitions.reduce(function (map, transition) {\n        map[transition.eventType] = map[transition.eventType] || [];\n        map[transition.eventType].push(transition);\n        return map;\n      }, {});\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"after\", {\n    get: function () {\n      return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"transitions\", {\n    /**\r\n     * All the transitions that can be taken from this state node.\r\n     */\n    get: function () {\n      return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.getCandidates = function (eventName) {\n    if (this.__cache.candidates[eventName]) {\n      return this.__cache.candidates[eventName];\n    }\n\n    var transient = eventName === NULL_EVENT;\n    var candidates = this.transitions.filter(function (transition) {\n      var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions\n\n      return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;\n    });\n    this.__cache.candidates[eventName] = candidates;\n    return candidates;\n  };\n  /**\r\n   * All delayed transitions from the config.\r\n   */\n\n\n  StateNode.prototype.getDelayedTransitions = function () {\n    var _this = this;\n\n    var afterConfig = this.config.after;\n\n    if (!afterConfig) {\n      return [];\n    }\n\n    var mutateEntryExit = function (delay, i) {\n      var delayRef = isFunction(delay) ? \"\".concat(_this.id, \":delay[\").concat(i, \"]\") : delay;\n      var eventType = after(delayRef, _this.id);\n\n      _this.onEntry.push(send$1(eventType, {\n        delay: delay\n      }));\n\n      _this.onExit.push(cancel(eventType));\n\n      return eventType;\n    };\n\n    var delayedTransitions = isArray(afterConfig) ? afterConfig.map(function (transition, i) {\n      var eventType = mutateEntryExit(transition.delay, i);\n      return __assign(__assign({}, transition), {\n        event: eventType\n      });\n    }) : flatten(Object.keys(afterConfig).map(function (delay, i) {\n      var configTransition = afterConfig[delay];\n      var resolvedTransition = isString(configTransition) ? {\n        target: configTransition\n      } : configTransition;\n      var resolvedDelay = !isNaN(+delay) ? +delay : delay;\n      var eventType = mutateEntryExit(resolvedDelay, i);\n      return toArray(resolvedTransition).map(function (transition) {\n        return __assign(__assign({}, transition), {\n          event: eventType,\n          delay: resolvedDelay\n        });\n      });\n    }));\n    return delayedTransitions.map(function (delayedTransition) {\n      var delay = delayedTransition.delay;\n      return __assign(__assign({}, _this.formatTransition(delayedTransition)), {\n        delay: delay\n      });\n    });\n  };\n  /**\r\n   * Returns the state nodes represented by the current state value.\r\n   *\r\n   * @param state The state value or State instance\r\n   */\n\n\n  StateNode.prototype.getStateNodes = function (state) {\n    var _a;\n\n    var _this = this;\n\n    if (!state) {\n      return [];\n    }\n\n    var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);\n\n    if (isString(stateValue)) {\n      var initialStateValue = this.getStateNode(stateValue).initial;\n      return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this, this.states[stateValue]];\n    }\n\n    var subStateKeys = Object.keys(stateValue);\n    var subStateNodes = [this];\n    subStateNodes.push.apply(subStateNodes, __spreadArray([], __read(flatten(subStateKeys.map(function (subStateKey) {\n      return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);\n    }))), false));\n    return subStateNodes;\n  };\n  /**\r\n   * Returns `true` if this state node explicitly handles the given event.\r\n   *\r\n   * @param event The event in question\r\n   */\n\n\n  StateNode.prototype.handles = function (event) {\n    var eventType = getEventType(event);\n    return this.events.includes(eventType);\n  };\n  /**\r\n   * Resolves the given `state` to a new `State` instance relative to this machine.\r\n   *\r\n   * This ensures that `.events` and `.nextEvents` represent the correct values.\r\n   *\r\n   * @param state The state to resolve\r\n   */\n\n\n  StateNode.prototype.resolveState = function (state) {\n    var stateFromConfig = state instanceof State ? state : State.create(state);\n    var configuration = Array.from(getConfiguration([], this.getStateNodes(stateFromConfig.value)));\n    return new State(__assign(__assign({}, stateFromConfig), {\n      value: this.resolve(stateFromConfig.value),\n      configuration: configuration,\n      done: isInFinalState(configuration, this),\n      tags: getTagsFromConfiguration(configuration),\n      machine: this.machine\n    }));\n  };\n\n  StateNode.prototype.transitionLeafNode = function (stateValue, state, _event) {\n    var stateNode = this.getStateNode(stateValue);\n    var next = stateNode.next(state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionCompoundNode = function (stateValue, state, _event) {\n    var subStateKeys = Object.keys(stateValue);\n    var stateNode = this.getStateNode(subStateKeys[0]);\n\n    var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionParallelNode = function (stateValue, state, _event) {\n    var e_2, _a;\n\n    var transitionMap = {};\n\n    try {\n      for (var _b = __values(Object.keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var subStateKey = _c.value;\n        var subStateValue = stateValue[subStateKey];\n\n        if (!subStateValue) {\n          continue;\n        }\n\n        var subStateNode = this.getStateNode(subStateKey);\n\n        var next = subStateNode._transition(subStateValue, state, _event);\n\n        if (next) {\n          transitionMap[subStateKey] = next;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    var stateTransitions = Object.keys(transitionMap).map(function (key) {\n      return transitionMap[key];\n    });\n    var enabledTransitions = flatten(stateTransitions.map(function (st) {\n      return st.transitions;\n    }));\n    var willTransition = stateTransitions.some(function (st) {\n      return st.transitions.length > 0;\n    });\n\n    if (!willTransition) {\n      return this.next(state, _event);\n    }\n\n    var entryNodes = flatten(stateTransitions.map(function (t) {\n      return t.entrySet;\n    }));\n    var configuration = flatten(Object.keys(transitionMap).map(function (key) {\n      return transitionMap[key].configuration;\n    }));\n    return {\n      transitions: enabledTransitions,\n      entrySet: entryNodes,\n      exitSet: flatten(stateTransitions.map(function (t) {\n        return t.exitSet;\n      })),\n      configuration: configuration,\n      source: state,\n      actions: flatten(Object.keys(transitionMap).map(function (key) {\n        return transitionMap[key].actions;\n      }))\n    };\n  };\n\n  StateNode.prototype._transition = function (stateValue, state, _event) {\n    // leaf node\n    if (isString(stateValue)) {\n      return this.transitionLeafNode(stateValue, state, _event);\n    } // hierarchical node\n\n\n    if (Object.keys(stateValue).length === 1) {\n      return this.transitionCompoundNode(stateValue, state, _event);\n    } // orthogonal node\n\n\n    return this.transitionParallelNode(stateValue, state, _event);\n  };\n\n  StateNode.prototype.getTransitionData = function (state, event) {\n    return this._transition(state.value, state, toSCXMLEvent(event));\n  };\n\n  StateNode.prototype.next = function (state, _event) {\n    var e_3, _a;\n\n    var _this = this;\n\n    var eventName = _event.name;\n    var actions = [];\n    var nextStateNodes = [];\n    var selectedTransition;\n\n    try {\n      for (var _b = __values(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var candidate = _c.value;\n        var cond = candidate.cond,\n            stateIn = candidate.in;\n        var resolvedContext = state.context;\n        var isInState = stateIn ? isString(stateIn) && isStateId(stateIn) ? // Check if in state by ID\n        state.matches(toStateValue(this.getStateNodeById(stateIn).path, this.delimiter)) : // Check if in state by relative grandparent\n        matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value)) : true;\n        var guardPassed = false;\n\n        try {\n          guardPassed = !cond || evaluateGuard(this.machine, cond, resolvedContext, _event, state);\n        } catch (err) {\n          throw new Error(\"Unable to evaluate guard '\".concat(cond.name || cond.type, \"' in transition for event '\").concat(eventName, \"' in state node '\").concat(this.id, \"':\\n\").concat(err.message));\n        }\n\n        if (guardPassed && isInState) {\n          if (candidate.target !== undefined) {\n            nextStateNodes = candidate.target;\n          }\n\n          actions.push.apply(actions, __spreadArray([], __read(candidate.actions), false));\n          selectedTransition = candidate;\n          break;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    if (!selectedTransition) {\n      return undefined;\n    }\n\n    if (!nextStateNodes.length) {\n      return {\n        transitions: [selectedTransition],\n        entrySet: [],\n        exitSet: [],\n        configuration: state.value ? [this] : [],\n        source: state,\n        actions: actions\n      };\n    }\n\n    var allNextStateNodes = flatten(nextStateNodes.map(function (stateNode) {\n      return _this.getRelativeStateNodes(stateNode, state.historyValue);\n    }));\n    var isInternal = !!selectedTransition.internal;\n    var reentryNodes = isInternal ? [] : flatten(allNextStateNodes.map(function (n) {\n      return _this.nodesFromChild(n);\n    }));\n    return {\n      transitions: [selectedTransition],\n      entrySet: reentryNodes,\n      exitSet: isInternal ? [] : [this],\n      configuration: allNextStateNodes,\n      source: state,\n      actions: actions\n    };\n  };\n\n  StateNode.prototype.nodesFromChild = function (childStateNode) {\n    if (childStateNode.escapes(this)) {\n      return [];\n    }\n\n    var nodes = [];\n    var marker = childStateNode;\n\n    while (marker && marker !== this) {\n      nodes.push(marker);\n      marker = marker.parent;\n    }\n\n    nodes.push(this); // inclusive\n\n    return nodes;\n  };\n  /**\r\n   * Whether the given state node \"escapes\" this state node. If the `stateNode` is equal to or the parent of\r\n   * this state node, it does not escape.\r\n   */\n\n\n  StateNode.prototype.escapes = function (stateNode) {\n    if (this === stateNode) {\n      return false;\n    }\n\n    var parent = this.parent;\n\n    while (parent) {\n      if (parent === stateNode) {\n        return false;\n      }\n\n      parent = parent.parent;\n    }\n\n    return true;\n  };\n\n  StateNode.prototype.getActions = function (transition, currentContext, _event, prevState) {\n    var e_4, _a, e_5, _b;\n\n    var prevConfig = getConfiguration([], prevState ? this.getStateNodes(prevState.value) : [this]);\n    var resolvedConfig = transition.configuration.length ? getConfiguration(prevConfig, transition.configuration) : prevConfig;\n\n    try {\n      for (var resolvedConfig_1 = __values(resolvedConfig), resolvedConfig_1_1 = resolvedConfig_1.next(); !resolvedConfig_1_1.done; resolvedConfig_1_1 = resolvedConfig_1.next()) {\n        var sn = resolvedConfig_1_1.value;\n\n        if (!has(prevConfig, sn)) {\n          transition.entrySet.push(sn);\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (resolvedConfig_1_1 && !resolvedConfig_1_1.done && (_a = resolvedConfig_1.return)) _a.call(resolvedConfig_1);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    try {\n      for (var prevConfig_1 = __values(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {\n        var sn = prevConfig_1_1.value;\n\n        if (!has(resolvedConfig, sn) || has(transition.exitSet, sn.parent)) {\n          transition.exitSet.push(sn);\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    var doneEvents = flatten(transition.entrySet.map(function (sn) {\n      var events = [];\n\n      if (sn.type !== 'final') {\n        return events;\n      }\n\n      var parent = sn.parent;\n\n      if (!parent.parent) {\n        return events;\n      }\n\n      events.push(done(sn.id, sn.doneData), // TODO: deprecate - final states should not emit done events for their own state.\n      done(parent.id, sn.doneData ? mapContext(sn.doneData, currentContext, _event) : undefined));\n      var grandparent = parent.parent;\n\n      if (grandparent.type === 'parallel') {\n        if (getChildren(grandparent).every(function (parentNode) {\n          return isInFinalState(transition.configuration, parentNode);\n        })) {\n          events.push(done(grandparent.id));\n        }\n      }\n\n      return events;\n    }));\n    transition.exitSet.sort(function (a, b) {\n      return b.order - a.order;\n    });\n    transition.entrySet.sort(function (a, b) {\n      return a.order - b.order;\n    });\n    var entryStates = new Set(transition.entrySet);\n    var exitStates = new Set(transition.exitSet);\n\n    var _c = __read([flatten(Array.from(entryStates).map(function (stateNode) {\n      return __spreadArray(__spreadArray([], __read(stateNode.activities.map(function (activity) {\n        return start(activity);\n      })), false), __read(stateNode.onEntry), false);\n    })).concat(doneEvents.map(raise)), flatten(Array.from(exitStates).map(function (stateNode) {\n      return __spreadArray(__spreadArray([], __read(stateNode.onExit), false), __read(stateNode.activities.map(function (activity) {\n        return stop(activity);\n      })), false);\n    }))], 2),\n        entryActions = _c[0],\n        exitActions = _c[1];\n\n    var actions = toActionObjects(exitActions.concat(transition.actions).concat(entryActions), this.machine.options.actions);\n    return actions;\n  };\n  /**\r\n   * Determines the next state given the current `state` and sent `event`.\r\n   *\r\n   * @param state The current State instance or state value\r\n   * @param event The event that was sent at the current state\r\n   * @param context The current context (extended state) of the current state\r\n   */\n\n\n  StateNode.prototype.transition = function (state, event, context) {\n    if (state === void 0) {\n      state = this.initialState;\n    }\n\n    var _event = toSCXMLEvent(event);\n\n    var currentState;\n\n    if (state instanceof State) {\n      currentState = context === undefined ? state : this.resolveState(State.from(state, context));\n    } else {\n      var resolvedStateValue = isString(state) ? this.resolve(pathToStateValue(this.getResolvedPath(state))) : this.resolve(state);\n      var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;\n      currentState = this.resolveState(State.from(resolvedStateValue, resolvedContext));\n    }\n\n    if (!IS_PRODUCTION && _event.name === WILDCARD) {\n      throw new Error(\"An event cannot have the wildcard type ('\".concat(WILDCARD, \"')\"));\n    }\n\n    if (this.strict) {\n      if (!this.events.includes(_event.name) && !isBuiltInEvent(_event.name)) {\n        throw new Error(\"Machine '\".concat(this.id, \"' does not accept event '\").concat(_event.name, \"'\"));\n      }\n    }\n\n    var stateTransition = this._transition(currentState.value, currentState, _event) || {\n      transitions: [],\n      configuration: [],\n      entrySet: [],\n      exitSet: [],\n      source: currentState,\n      actions: []\n    };\n    var prevConfig = getConfiguration([], this.getStateNodes(currentState.value));\n    var resolvedConfig = stateTransition.configuration.length ? getConfiguration(prevConfig, stateTransition.configuration) : prevConfig;\n    stateTransition.configuration = __spreadArray([], __read(resolvedConfig), false);\n    return this.resolveTransition(stateTransition, currentState, currentState.context, _event);\n  };\n\n  StateNode.prototype.resolveRaisedTransition = function (state, _event, originalEvent) {\n    var _a;\n\n    var currentActions = state.actions;\n    state = this.transition(state, _event); // Save original event to state\n    // TODO: this should be the raised event! Delete in V5 (breaking)\n\n    state._event = originalEvent;\n    state.event = originalEvent.data;\n\n    (_a = state.actions).unshift.apply(_a, __spreadArray([], __read(currentActions), false));\n\n    return state;\n  };\n\n  StateNode.prototype.resolveTransition = function (stateTransition, currentState, context, _event) {\n    var e_6, _a;\n\n    var _this = this;\n\n    if (_event === void 0) {\n      _event = initEvent;\n    }\n\n    var configuration = stateTransition.configuration; // Transition will \"apply\" if:\n    // - this is the initial state (there is no current state)\n    // - OR there are transitions\n\n    var willTransition = !currentState || stateTransition.transitions.length > 0;\n    var resolvedStateValue = willTransition ? getValue(this.machine, configuration) : undefined;\n    var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;\n    var actions = this.getActions(stateTransition, context, _event, currentState);\n    var activities = currentState ? __assign({}, currentState.activities) : {};\n\n    try {\n      for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {\n        var action = actions_1_1.value;\n\n        if (action.type === start$1) {\n          activities[action.activity.id || action.activity.type] = action;\n        } else if (action.type === stop$1) {\n          activities[action.activity.id || action.activity.type] = false;\n        }\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n\n    var _b = __read(resolveActions(this, currentState, context, _event, actions, this.machine.config.preserveActionOrder), 2),\n        resolvedActions = _b[0],\n        updatedContext = _b[1];\n\n    var _c = __read(partition(resolvedActions, function (action) {\n      return action.type === raise$1 || action.type === send && action.to === SpecialTargets.Internal;\n    }), 2),\n        raisedEvents = _c[0],\n        nonRaisedActions = _c[1];\n\n    var invokeActions = resolvedActions.filter(function (action) {\n      var _a;\n\n      return action.type === start$1 && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === invoke;\n    });\n    var children = invokeActions.reduce(function (acc, action) {\n      acc[action.activity.id] = createInvocableActor(action.activity, _this.machine, updatedContext, _event);\n      return acc;\n    }, currentState ? __assign({}, currentState.children) : {});\n    var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];\n    var isDone = isInFinalState(resolvedConfiguration, this);\n    var nextState = new State({\n      value: resolvedStateValue || currentState.value,\n      context: updatedContext,\n      _event: _event,\n      // Persist _sessionid between states\n      _sessionid: currentState ? currentState._sessionid : null,\n      historyValue: resolvedStateValue ? historyValue ? updateHistoryValue(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,\n      history: !resolvedStateValue || stateTransition.source ? currentState : undefined,\n      actions: resolvedStateValue ? nonRaisedActions : [],\n      activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},\n      events: [],\n      configuration: resolvedConfiguration,\n      transitions: stateTransition.transitions,\n      children: children,\n      done: isDone,\n      tags: currentState === null || currentState === void 0 ? void 0 : currentState.tags,\n      machine: this\n    });\n    var didUpdateContext = context !== updatedContext;\n    nextState.changed = _event.name === update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks\n\n    var history = nextState.history;\n\n    if (history) {\n      delete history.history;\n    } // There are transient transitions if the machine is not in a final state\n    // and if some of the state nodes have transient (\"always\") transitions.\n\n\n    var isTransient = !isDone && (this._transient || configuration.some(function (stateNode) {\n      return stateNode._transient;\n    })); // If there are no enabled transitions, check if there are transient transitions.\n    // If there are transient transitions, continue checking for more transitions\n    // because an transient transition should be triggered even if there are no\n    // enabled transitions.\n    //\n    // If we're already working on an transient transition (by checking\n    // if the event is a NULL_EVENT), then stop to prevent an infinite loop.\n    //\n    // Otherwise, if there are no enabled nor transient transitions, we are done.\n\n    if (!willTransition && (!isTransient || _event.name === NULL_EVENT)) {\n      return nextState;\n    }\n\n    var maybeNextState = nextState;\n\n    if (!isDone) {\n      if (isTransient) {\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, {\n          type: nullEvent\n        }, _event);\n      }\n\n      while (raisedEvents.length) {\n        var raisedEvent = raisedEvents.shift();\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event);\n      }\n    } // Detect if state changed\n\n\n    var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !stateValuesEqual(maybeNextState.value, history.value) : undefined);\n    maybeNextState.changed = changed; // Preserve original history after raised events\n\n    maybeNextState.history = history;\n    maybeNextState.tags = getTagsFromConfiguration(maybeNextState.configuration);\n    return maybeNextState;\n  };\n  /**\r\n   * Returns the child state node from its relative `stateKey`, or throws.\r\n   */\n\n\n  StateNode.prototype.getStateNode = function (stateKey) {\n    if (isStateId(stateKey)) {\n      return this.machine.getStateNodeById(stateKey);\n    }\n\n    if (!this.states) {\n      throw new Error(\"Unable to retrieve child state '\".concat(stateKey, \"' from '\").concat(this.id, \"'; no child states exist.\"));\n    }\n\n    var result = this.states[stateKey];\n\n    if (!result) {\n      throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n    }\n\n    return result;\n  };\n  /**\r\n   * Returns the state node with the given `stateId`, or throws.\r\n   *\r\n   * @param stateId The state ID. The prefix \"#\" is removed.\r\n   */\n\n\n  StateNode.prototype.getStateNodeById = function (stateId) {\n    var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;\n\n    if (resolvedStateId === this.id) {\n      return this;\n    }\n\n    var stateNode = this.machine.idMap[resolvedStateId];\n\n    if (!stateNode) {\n      throw new Error(\"Child state node '#\".concat(resolvedStateId, \"' does not exist on machine '\").concat(this.id, \"'\"));\n    }\n\n    return stateNode;\n  };\n  /**\r\n   * Returns the relative state node from the given `statePath`, or throws.\r\n   *\r\n   * @param statePath The string or string array relative path to the state node.\r\n   */\n\n\n  StateNode.prototype.getStateNodeByPath = function (statePath) {\n    if (typeof statePath === 'string' && isStateId(statePath)) {\n      try {\n        return this.getStateNodeById(statePath.slice(1));\n      } catch (e) {// try individual paths\n        // throw e;\n      }\n    }\n\n    var arrayStatePath = toStatePath(statePath, this.delimiter).slice();\n    var currentStateNode = this;\n\n    while (arrayStatePath.length) {\n      var key = arrayStatePath.shift();\n\n      if (!key.length) {\n        break;\n      }\n\n      currentStateNode = currentStateNode.getStateNode(key);\n    }\n\n    return currentStateNode;\n  };\n  /**\r\n   * Resolves a partial state value with its full representation in this machine.\r\n   *\r\n   * @param stateValue The partial state value to resolve.\r\n   */\n\n\n  StateNode.prototype.resolve = function (stateValue) {\n    var _a;\n\n    var _this = this;\n\n    if (!stateValue) {\n      return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties\n    }\n\n    switch (this.type) {\n      case 'parallel':\n        return mapValues(this.initialStateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;\n        });\n\n      case 'compound':\n        if (isString(stateValue)) {\n          var subStateNode = this.getStateNode(stateValue);\n\n          if (subStateNode.type === 'parallel' || subStateNode.type === 'compound') {\n            return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;\n          }\n\n          return stateValue;\n        }\n\n        if (!Object.keys(stateValue).length) {\n          return this.initialStateValue || {};\n        }\n\n        return mapValues(stateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;\n        });\n\n      default:\n        return stateValue || EMPTY_OBJECT;\n    }\n  };\n\n  StateNode.prototype.getResolvedPath = function (stateIdentifier) {\n    if (isStateId(stateIdentifier)) {\n      var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];\n\n      if (!stateNode) {\n        throw new Error(\"Unable to find state node '\".concat(stateIdentifier, \"'\"));\n      }\n\n      return stateNode.path;\n    }\n\n    return toStatePath(stateIdentifier, this.delimiter);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateValue\", {\n    get: function () {\n      var _a;\n\n      if (this.__cache.initialStateValue) {\n        return this.__cache.initialStateValue;\n      }\n\n      var initialStateValue;\n\n      if (this.type === 'parallel') {\n        initialStateValue = mapFilterValues(this.states, function (state) {\n          return state.initialStateValue || EMPTY_OBJECT;\n        }, function (stateNode) {\n          return !(stateNode.type === 'history');\n        });\n      } else if (this.initial !== undefined) {\n        if (!this.states[this.initial]) {\n          throw new Error(\"Initial state '\".concat(this.initial, \"' not found on '\").concat(this.key, \"'\"));\n        }\n\n        initialStateValue = isLeafNode(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);\n      } else {\n        // The finite state value of a machine without child states is just an empty object\n        initialStateValue = {};\n      }\n\n      this.__cache.initialStateValue = initialStateValue;\n      return this.__cache.initialStateValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.getInitialState = function (stateValue, context) {\n    this._init(); // TODO: this should be in the constructor (see note in constructor)\n\n\n    var configuration = this.getStateNodes(stateValue);\n    return this.resolveTransition({\n      configuration: configuration,\n      entrySet: configuration,\n      exitSet: [],\n      transitions: [],\n      source: undefined,\n      actions: []\n    }, undefined, context !== null && context !== void 0 ? context : this.machine.context, undefined);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialState\", {\n    /**\r\n     * The initial State instance, which includes all actions to be executed from\r\n     * entering the initial state.\r\n     */\n    get: function () {\n      var initialStateValue = this.initialStateValue;\n\n      if (!initialStateValue) {\n        throw new Error(\"Cannot retrieve initial state from simple state '\".concat(this.id, \"'.\"));\n      }\n\n      return this.getInitialState(initialStateValue);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"target\", {\n    /**\r\n     * The target state value of the history state node, if it exists. This represents the\r\n     * default state value to transition to if no history value exists yet.\r\n     */\n    get: function () {\n      var target;\n\n      if (this.type === 'history') {\n        var historyConfig = this.config;\n\n        if (isString(historyConfig.target)) {\n          target = isStateId(historyConfig.target) ? pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;\n        } else {\n          target = historyConfig.target;\n        }\n      }\n\n      return target;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the leaf nodes from a state path relative to this state node.\r\n   *\r\n   * @param relativeStateId The relative state path to retrieve the state nodes\r\n   * @param history The previous state to retrieve history\r\n   * @param resolve Whether state nodes should resolve to initial child state nodes\r\n   */\n\n  StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {\n    if (resolve === void 0) {\n      resolve = true;\n    }\n\n    return resolve ? relativeStateId.type === 'history' ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateNodes\", {\n    get: function () {\n      var _this = this;\n\n      if (isLeafNode(this)) {\n        return [this];\n      } // Case when state node is compound but no initial state is defined\n\n\n      if (this.type === 'compound' && !this.initial) {\n        if (!IS_PRODUCTION) {\n          warn(false, \"Compound state node '\".concat(this.id, \"' has no initial state.\"));\n        }\n\n        return [this];\n      }\n\n      var initialStateNodePaths = toStatePaths(this.initialStateValue);\n      return flatten(initialStateNodePaths.map(function (initialPath) {\n        return _this.getFromRelativePath(initialPath);\n      }));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Retrieves state nodes from a relative path to this state node.\r\n   *\r\n   * @param relativePath The relative path from this state node\r\n   * @param historyValue\r\n   */\n\n  StateNode.prototype.getFromRelativePath = function (relativePath) {\n    if (!relativePath.length) {\n      return [this];\n    }\n\n    var _a = __read(relativePath),\n        stateKey = _a[0],\n        childStatePath = _a.slice(1);\n\n    if (!this.states) {\n      throw new Error(\"Cannot retrieve subPath '\".concat(stateKey, \"' from node with no states\"));\n    }\n\n    var childStateNode = this.getStateNode(stateKey);\n\n    if (childStateNode.type === 'history') {\n      return childStateNode.resolveHistory();\n    }\n\n    if (!this.states[stateKey]) {\n      throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n    }\n\n    return this.states[stateKey].getFromRelativePath(childStatePath);\n  };\n\n  StateNode.prototype.historyValue = function (relativeStateValue) {\n    if (!Object.keys(this.states).length) {\n      return undefined;\n    }\n\n    return {\n      current: relativeStateValue || this.initialStateValue,\n      states: mapFilterValues(this.states, function (stateNode, key) {\n        if (!relativeStateValue) {\n          return stateNode.historyValue();\n        }\n\n        var subStateValue = isString(relativeStateValue) ? undefined : relativeStateValue[key];\n        return stateNode.historyValue(subStateValue || stateNode.initialStateValue);\n      }, function (stateNode) {\n        return !stateNode.history;\n      })\n    };\n  };\n  /**\r\n   * Resolves to the historical value(s) of the parent state node,\r\n   * represented by state nodes.\r\n   *\r\n   * @param historyValue\r\n   */\n\n\n  StateNode.prototype.resolveHistory = function (historyValue) {\n    var _this = this;\n\n    if (this.type !== 'history') {\n      return [this];\n    }\n\n    var parent = this.parent;\n\n    if (!historyValue) {\n      var historyTarget = this.target;\n      return historyTarget ? flatten(toStatePaths(historyTarget).map(function (relativeChildPath) {\n        return parent.getFromRelativePath(relativeChildPath);\n      })) : parent.initialStateNodes;\n    }\n\n    var subHistoryValue = nestedPath(parent.path, 'states')(historyValue).current;\n\n    if (isString(subHistoryValue)) {\n      return [parent.getStateNode(subHistoryValue)];\n    }\n\n    return flatten(toStatePaths(subHistoryValue).map(function (subStatePath) {\n      return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];\n    }));\n  };\n\n  Object.defineProperty(StateNode.prototype, \"stateIds\", {\n    /**\r\n     * All the state node IDs of this state node and its descendant state nodes.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var childStateIds = flatten(Object.keys(this.states).map(function (stateKey) {\n        return _this.states[stateKey].stateIds;\n      }));\n      return [this.id].concat(childStateIds);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"events\", {\n    /**\r\n     * All the event types accepted by this state node and its descendants.\r\n     */\n    get: function () {\n      var e_7, _a, e_8, _b;\n\n      if (this.__cache.events) {\n        return this.__cache.events;\n      }\n\n      var states = this.states;\n      var events = new Set(this.ownEvents);\n\n      if (states) {\n        try {\n          for (var _c = __values(Object.keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {\n            var stateId = _d.value;\n            var state = states[stateId];\n\n            if (state.states) {\n              try {\n                for (var _e = (e_8 = void 0, __values(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {\n                  var event_1 = _f.value;\n                  events.add(\"\".concat(event_1));\n                }\n              } catch (e_8_1) {\n                e_8 = {\n                  error: e_8_1\n                };\n              } finally {\n                try {\n                  if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                } finally {\n                  if (e_8) throw e_8.error;\n                }\n              }\n            }\n          }\n        } catch (e_7_1) {\n          e_7 = {\n            error: e_7_1\n          };\n        } finally {\n          try {\n            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n          } finally {\n            if (e_7) throw e_7.error;\n          }\n        }\n      }\n\n      return this.__cache.events = Array.from(events);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"ownEvents\", {\n    /**\r\n     * All the events that have transitions directly from this state node.\r\n     *\r\n     * Excludes any inert events.\r\n     */\n    get: function () {\n      var events = new Set(this.transitions.filter(function (transition) {\n        return !(!transition.target && !transition.actions.length && transition.internal);\n      }).map(function (transition) {\n        return transition.eventType;\n      }));\n      return Array.from(events);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.resolveTarget = function (_target) {\n    var _this = this;\n\n    if (_target === undefined) {\n      // an undefined target signals that the state node should not transition from that state when receiving that event\n      return undefined;\n    }\n\n    return _target.map(function (target) {\n      if (!isString(target)) {\n        return target;\n      }\n\n      var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,\n      // do not include machine key on target\n\n      if (isInternalTarget && !_this.parent) {\n        return _this.getStateNodeByPath(target.slice(1));\n      }\n\n      var resolvedTarget = isInternalTarget ? _this.key + target : target;\n\n      if (_this.parent) {\n        try {\n          var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);\n\n          return targetStateNode;\n        } catch (err) {\n          throw new Error(\"Invalid transition definition for state node '\".concat(_this.id, \"':\\n\").concat(err.message));\n        }\n      } else {\n        return _this.getStateNodeByPath(resolvedTarget);\n      }\n    });\n  };\n\n  StateNode.prototype.formatTransition = function (transitionConfig) {\n    var _this = this;\n\n    var normalizedTarget = normalizeTarget(transitionConfig.target);\n    var internal = 'internal' in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function (_target) {\n      return isString(_target) && _target[0] === _this.delimiter;\n    }) : true;\n    var guards = this.machine.options.guards;\n    var target = this.resolveTarget(normalizedTarget);\n\n    var transition = __assign(__assign({}, transitionConfig), {\n      actions: toActionObjects(toArray(transitionConfig.actions)),\n      cond: toGuard(transitionConfig.cond, guards),\n      target: target,\n      source: this,\n      internal: internal,\n      eventType: transitionConfig.event,\n      toJSON: function () {\n        return __assign(__assign({}, transition), {\n          target: transition.target ? transition.target.map(function (t) {\n            return \"#\".concat(t.id);\n          }) : undefined,\n          source: \"#\".concat(_this.id)\n        });\n      }\n    });\n\n    return transition;\n  };\n\n  StateNode.prototype.formatTransitions = function () {\n    var e_9, _a;\n\n    var _this = this;\n\n    var onConfig;\n\n    if (!this.config.on) {\n      onConfig = [];\n    } else if (Array.isArray(this.config.on)) {\n      onConfig = this.config.on;\n    } else {\n      var _b = this.config.on,\n          _c = WILDCARD,\n          _d = _b[_c],\n          wildcardConfigs = _d === void 0 ? [] : _d,\n          strictTransitionConfigs_1 = __rest(_b, [typeof _c === \"symbol\" ? _c : _c + \"\"]);\n\n      onConfig = flatten(Object.keys(strictTransitionConfigs_1).map(function (key) {\n        if (!IS_PRODUCTION && key === NULL_EVENT) {\n          warn(false, \"Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. \" + \"Please check the `on` configuration for \\\"#\".concat(_this.id, \"\\\".\"));\n        }\n\n        var transitionConfigArray = toTransitionConfigArray(key, strictTransitionConfigs_1[key]);\n\n        if (!IS_PRODUCTION) {\n          validateArrayifiedTransitions(_this, key, transitionConfigArray);\n        }\n\n        return transitionConfigArray;\n      }).concat(toTransitionConfigArray(WILDCARD, wildcardConfigs)));\n    }\n\n    var eventlessConfig = this.config.always ? toTransitionConfigArray('', this.config.always) : [];\n    var doneConfig = this.config.onDone ? toTransitionConfigArray(String(done(this.id)), this.config.onDone) : [];\n\n    if (!IS_PRODUCTION) {\n      warn(!(this.config.onDone && !this.parent), \"Root nodes cannot have an \\\".onDone\\\" transition. Please check the config of \\\"\".concat(this.id, \"\\\".\"));\n    }\n\n    var invokeConfig = flatten(this.invoke.map(function (invokeDef) {\n      var settleTransitions = [];\n\n      if (invokeDef.onDone) {\n        settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(doneInvoke(invokeDef.id)), invokeDef.onDone)), false));\n      }\n\n      if (invokeDef.onError) {\n        settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(error(invokeDef.id)), invokeDef.onError)), false));\n      }\n\n      return settleTransitions;\n    }));\n    var delayedTransitions = this.after;\n    var formattedTransitions = flatten(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(doneConfig), false), __read(invokeConfig), false), __read(onConfig), false), __read(eventlessConfig), false).map(function (transitionConfig) {\n      return toArray(transitionConfig).map(function (transition) {\n        return _this.formatTransition(transition);\n      });\n    }));\n\n    try {\n      for (var delayedTransitions_1 = __values(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {\n        var delayedTransition = delayedTransitions_1_1.value;\n        formattedTransitions.push(delayedTransition);\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n\n    return formattedTransitions;\n  };\n\n  return StateNode;\n}();\n\nexport { StateNode };","map":{"version":3,"sources":["C:/Users/Elnathan/node_modules/xstate/es/StateNode.js"],"names":["__assign","__spreadArray","__read","__values","__rest","isFunction","mapValues","isArray","flatten","toArray","toStateValue","isString","getEventType","toSCXMLEvent","matchesState","path","evaluateGuard","mapContext","pathToStateValue","isBuiltInEvent","partition","updateHistoryValue","toStatePath","mapFilterValues","warn","toStatePaths","nestedPath","normalizeTarget","toGuard","toTransitionConfigArray","isMachine","createInvokeId","SpecialTargets","State","stateValuesEqual","start","start$1","stop","stop$1","raise","raise$1","send","invoke","update","nullEvent","done","toActionObjects","resolveActions","doneInvoke","error","toActionObject","toActivityDefinition","after","send$1","cancel","initEvent","IS_PRODUCTION","STATE_DELIMITER","getAllStateNodes","getConfiguration","isInFinalState","getTagsFromConfiguration","has","getChildren","getValue","isLeafNode","createInvocableActor","toInvokeDefinition","NULL_EVENT","STATE_IDENTIFIER","WILDCARD","EMPTY_OBJECT","isStateId","str","createDefaultOptions","actions","guards","services","activities","delays","validateArrayifiedTransitions","stateNode","event","transitions","hasNonLastUnguardedTarget","slice","some","transition","target","eventText","concat","id","StateNode","config","options","_context","_stateInfo","_this","context","undefined","_a","order","__xstatenode","__cache","events","relativeValue","Map","initialStateValue","initialState","on","candidates","delayedTransitions","idMap","tags","Object","assign","parent","key","machine","delimiter","join","version","type","parallel","states","keys","length","history","schema","description","initial","stateConfig","dfs","e_1","_b","_c","next","child","value","e_1_1","return","call","_transient","always","Array","strict","onEntry","entry","map","action","onExit","exit","meta","doneData","data","invokeConfig","i","invokeId","src","invokeSource","activity","bind","prototype","_init","forEach","withConfig","withContext","defineProperty","get","enumerable","configurable","state","definition","toJSON","reduce","eventType","push","getDelayedTransitions","formatTransitions","getCandidates","eventName","transient","filter","sameEventType","afterConfig","mutateEntryExit","delay","delayRef","configTransition","resolvedTransition","resolvedDelay","isNaN","delayedTransition","formatTransition","getStateNodes","stateValue","getStateNode","subStateKeys","subStateNodes","apply","subStateKey","handles","includes","resolveState","stateFromConfig","create","configuration","from","resolve","transitionLeafNode","_event","transitionCompoundNode","_transition","transitionParallelNode","e_2","transitionMap","subStateValue","subStateNode","e_2_1","stateTransitions","enabledTransitions","st","willTransition","entryNodes","t","entrySet","exitSet","source","getTransitionData","e_3","name","nextStateNodes","selectedTransition","candidate","cond","stateIn","in","resolvedContext","isInState","matches","getStateNodeById","guardPassed","err","Error","message","e_3_1","allNextStateNodes","getRelativeStateNodes","historyValue","isInternal","internal","reentryNodes","n","nodesFromChild","childStateNode","escapes","nodes","marker","getActions","currentContext","prevState","e_4","e_5","prevConfig","resolvedConfig","resolvedConfig_1","resolvedConfig_1_1","sn","e_4_1","prevConfig_1","prevConfig_1_1","e_5_1","doneEvents","grandparent","every","parentNode","sort","a","b","entryStates","Set","exitStates","entryActions","exitActions","currentState","resolvedStateValue","getResolvedPath","stateTransition","resolveTransition","resolveRaisedTransition","originalEvent","currentActions","unshift","e_6","actions_1","actions_1_1","e_6_1","preserveActionOrder","resolvedActions","updatedContext","to","Internal","raisedEvents","nonRaisedActions","invokeActions","children","acc","resolvedConfiguration","isDone","nextState","_sessionid","didUpdateContext","changed","isTransient","maybeNextState","raisedEvent","shift","stateKey","result","stateId","resolvedStateId","getStateNodeByPath","statePath","e","arrayStatePath","currentStateNode","stateIdentifier","getInitialState","historyConfig","relativeStateId","resolveHistory","initialStateNodes","initialStateNodePaths","initialPath","getFromRelativePath","relativePath","childStatePath","relativeStateValue","current","historyTarget","relativeChildPath","subHistoryValue","subStatePath","childStateIds","stateIds","e_7","e_8","ownEvents","_d","_e","_f","event_1","add","e_8_1","e_7_1","resolveTarget","_target","isInternalTarget","resolvedTarget","targetStateNode","transitionConfig","normalizedTarget","e_9","onConfig","wildcardConfigs","strictTransitionConfigs_1","transitionConfigArray","eventlessConfig","doneConfig","onDone","String","invokeDef","settleTransitions","onError","formattedTransitions","delayedTransitions_1","delayedTransitions_1_1","e_9_1"],"mappings":"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","sourcesContent":["import { __assign, __spreadArray, __read, __values, __rest } from './_virtual/_tslib.js';\nimport { isFunction, mapValues, isArray, flatten, toArray, toStateValue, isString, getEventType, toSCXMLEvent, matchesState, path, evaluateGuard, mapContext, pathToStateValue, isBuiltInEvent, partition, updateHistoryValue, toStatePath, mapFilterValues, warn, toStatePaths, nestedPath, normalizeTarget, toGuard, toTransitionConfigArray, isMachine, createInvokeId } from './utils.js';\nimport { SpecialTargets } from './types.js';\nimport { State, stateValuesEqual } from './State.js';\nimport { start as start$1, stop as stop$1, raise as raise$1, send, invoke, update, nullEvent } from './actionTypes.js';\nimport { done, start, raise, stop, toActionObjects, resolveActions, doneInvoke, error, toActionObject, toActivityDefinition, after, send as send$1, cancel, initEvent } from './actions.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { STATE_DELIMITER } from './constants.js';\nimport { getAllStateNodes, getConfiguration, isInFinalState, getTagsFromConfiguration, has, getChildren, getValue, isLeafNode } from './stateUtils.js';\nimport { createInvocableActor } from './Actor.js';\nimport { toInvokeDefinition } from './invokeUtils.js';\n\nvar NULL_EVENT = '';\nvar STATE_IDENTIFIER = '#';\nvar WILDCARD = '*';\nvar EMPTY_OBJECT = {};\n\nvar isStateId = function (str) {\n  return str[0] === STATE_IDENTIFIER;\n};\n\nvar createDefaultOptions = function () {\n  return {\n    actions: {},\n    guards: {},\n    services: {},\n    activities: {},\n    delays: {}\n  };\n};\n\nvar validateArrayifiedTransitions = function (stateNode, event, transitions) {\n  var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {\n    return !('cond' in transition) && !('in' in transition) && (isString(transition.target) || isMachine(transition.target));\n  });\n  var eventText = event === NULL_EVENT ? 'the transient event' : \"event '\".concat(event, \"'\");\n  warn(!hasNonLastUnguardedTarget, \"One or more transitions for \".concat(eventText, \" on state '\").concat(stateNode.id, \"' are unreachable. \") + \"Make sure that the default transition is the last one defined.\");\n};\n\nvar StateNode =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  function StateNode(\n  /**\r\n   * The raw config used to create the machine.\r\n   */\n  config, options,\n  /**\r\n   * The initial extended state\r\n   */\n  _context, // TODO: this is unsafe, but we're removing it in v5 anyway\n  _stateInfo) {\n    var _this = this;\n\n    if (_context === void 0) {\n      _context = 'context' in config ? config.context : undefined;\n    }\n\n    var _a;\n\n    this.config = config;\n    this._context = _context;\n    /**\r\n     * The order this state node appears. Corresponds to the implicit SCXML document order.\r\n     */\n\n    this.order = -1;\n    this.__xstatenode = true;\n    this.__cache = {\n      events: undefined,\n      relativeValue: new Map(),\n      initialStateValue: undefined,\n      initialState: undefined,\n      on: undefined,\n      transitions: undefined,\n      candidates: {},\n      delayedTransitions: undefined\n    };\n    this.idMap = {};\n    this.tags = [];\n    this.options = Object.assign(createDefaultOptions(), options);\n    this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;\n    this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || '(machine)';\n    this.machine = this.parent ? this.parent.machine : this;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);\n    this.id = this.config.id || __spreadArray([this.machine.key], __read(this.path), false).join(this.delimiter);\n    this.version = this.parent ? this.parent.version : this.config.version;\n    this.type = this.config.type || (this.config.parallel ? 'parallel' : this.config.states && Object.keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');\n    this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};\n    this.description = this.config.description;\n\n    if (!IS_PRODUCTION) {\n      warn(!('parallel' in this.config), \"The \\\"parallel\\\" property is deprecated and will be removed in version 4.1. \".concat(this.config.parallel ? \"Replace with `type: 'parallel'`\" : \"Use `type: '\".concat(this.type, \"'`\"), \" in the config for state node '\").concat(this.id, \"' instead.\"));\n    }\n\n    this.initial = this.config.initial;\n    this.states = this.config.states ? mapValues(this.config.states, function (stateConfig, key) {\n      var _a;\n\n      var stateNode = new StateNode(stateConfig, {}, undefined, {\n        parent: _this,\n        key: key\n      });\n      Object.assign(_this.idMap, __assign((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));\n      return stateNode;\n    }) : EMPTY_OBJECT; // Document order\n\n    var order = 0;\n\n    function dfs(stateNode) {\n      var e_1, _a;\n\n      stateNode.order = order++;\n\n      try {\n        for (var _b = __values(getChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n          dfs(child);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    dfs(this); // History config\n\n    this.history = this.config.history === true ? 'shallow' : this.config.history || false;\n    this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function (_a) {\n      var event = _a.event;\n      return event === NULL_EVENT;\n    }) : NULL_EVENT in this.config.on);\n    this.strict = !!this.config.strict; // TODO: deprecate (entry)\n\n    this.onEntry = toArray(this.config.entry || this.config.onEntry).map(function (action) {\n      return toActionObject(action);\n    }); // TODO: deprecate (exit)\n\n    this.onExit = toArray(this.config.exit || this.config.onExit).map(function (action) {\n      return toActionObject(action);\n    });\n    this.meta = this.config.meta;\n    this.doneData = this.type === 'final' ? this.config.data : undefined;\n    this.invoke = toArray(this.config.invoke).map(function (invokeConfig, i) {\n      var _a, _b;\n\n      if (isMachine(invokeConfig)) {\n        var invokeId = createInvokeId(_this.id, i);\n        _this.machine.options.services = __assign((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);\n        return toInvokeDefinition({\n          src: invokeId,\n          id: invokeId\n        });\n      } else if (isString(invokeConfig.src)) {\n        var invokeId = invokeConfig.id || createInvokeId(_this.id, i);\n        return toInvokeDefinition(__assign(__assign({}, invokeConfig), {\n          id: invokeId,\n          src: invokeConfig.src\n        }));\n      } else if (isMachine(invokeConfig.src) || isFunction(invokeConfig.src)) {\n        var invokeId = invokeConfig.id || createInvokeId(_this.id, i);\n        _this.machine.options.services = __assign((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);\n        return toInvokeDefinition(__assign(__assign({\n          id: invokeId\n        }, invokeConfig), {\n          src: invokeId\n        }));\n      } else {\n        var invokeSource = invokeConfig.src;\n        return toInvokeDefinition(__assign(__assign({\n          id: createInvokeId(_this.id, i)\n        }, invokeConfig), {\n          src: invokeSource\n        }));\n      }\n    });\n    this.activities = toArray(this.config.activities).concat(this.invoke).map(function (activity) {\n      return toActivityDefinition(activity);\n    });\n    this.transition = this.transition.bind(this);\n    this.tags = toArray(this.config.tags); // TODO: this is the real fix for initialization once\n    // state node getters are deprecated\n    // if (!this.parent) {\n    //   this._init();\n    // }\n  }\n\n  StateNode.prototype._init = function () {\n    if (this.__cache.transitions) {\n      return;\n    }\n\n    getAllStateNodes(this).forEach(function (stateNode) {\n      return stateNode.on;\n    });\n  };\n  /**\r\n   * Clones this state machine with custom options and context.\r\n   *\r\n   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.\r\n   * @param context Custom context (will override predefined context)\r\n   */\n\n\n  StateNode.prototype.withConfig = function (options, context) {\n    var _a = this.options,\n        actions = _a.actions,\n        activities = _a.activities,\n        guards = _a.guards,\n        services = _a.services,\n        delays = _a.delays;\n    return new StateNode(this.config, {\n      actions: __assign(__assign({}, actions), options.actions),\n      activities: __assign(__assign({}, activities), options.activities),\n      guards: __assign(__assign({}, guards), options.guards),\n      services: __assign(__assign({}, services), options.services),\n      delays: __assign(__assign({}, delays), options.delays)\n    }, context !== null && context !== void 0 ? context : this.context);\n  };\n  /**\r\n   * Clones this state machine with custom context.\r\n   *\r\n   * @param context Custom context (will override predefined context, not recursive)\r\n   */\n\n\n  StateNode.prototype.withContext = function (context) {\n    return new StateNode(this.config, this.options, context);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"context\", {\n    get: function () {\n      return isFunction(this._context) ? this._context() : this._context;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"definition\", {\n    /**\r\n     * The well-structured state node definition.\r\n     */\n    get: function () {\n      return {\n        id: this.id,\n        key: this.key,\n        version: this.version,\n        context: this.context,\n        type: this.type,\n        initial: this.initial,\n        history: this.history,\n        states: mapValues(this.states, function (state) {\n          return state.definition;\n        }),\n        on: this.on,\n        transitions: this.transitions,\n        entry: this.onEntry,\n        exit: this.onExit,\n        activities: this.activities || [],\n        meta: this.meta,\n        order: this.order || -1,\n        data: this.doneData,\n        invoke: this.invoke,\n        description: this.description,\n        tags: this.tags\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.toJSON = function () {\n    return this.definition;\n  };\n\n  Object.defineProperty(StateNode.prototype, \"on\", {\n    /**\r\n     * The mapping of events to transitions.\r\n     */\n    get: function () {\n      if (this.__cache.on) {\n        return this.__cache.on;\n      }\n\n      var transitions = this.transitions;\n      return this.__cache.on = transitions.reduce(function (map, transition) {\n        map[transition.eventType] = map[transition.eventType] || [];\n        map[transition.eventType].push(transition);\n        return map;\n      }, {});\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"after\", {\n    get: function () {\n      return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"transitions\", {\n    /**\r\n     * All the transitions that can be taken from this state node.\r\n     */\n    get: function () {\n      return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.getCandidates = function (eventName) {\n    if (this.__cache.candidates[eventName]) {\n      return this.__cache.candidates[eventName];\n    }\n\n    var transient = eventName === NULL_EVENT;\n    var candidates = this.transitions.filter(function (transition) {\n      var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions\n\n      return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;\n    });\n    this.__cache.candidates[eventName] = candidates;\n    return candidates;\n  };\n  /**\r\n   * All delayed transitions from the config.\r\n   */\n\n\n  StateNode.prototype.getDelayedTransitions = function () {\n    var _this = this;\n\n    var afterConfig = this.config.after;\n\n    if (!afterConfig) {\n      return [];\n    }\n\n    var mutateEntryExit = function (delay, i) {\n      var delayRef = isFunction(delay) ? \"\".concat(_this.id, \":delay[\").concat(i, \"]\") : delay;\n      var eventType = after(delayRef, _this.id);\n\n      _this.onEntry.push(send$1(eventType, {\n        delay: delay\n      }));\n\n      _this.onExit.push(cancel(eventType));\n\n      return eventType;\n    };\n\n    var delayedTransitions = isArray(afterConfig) ? afterConfig.map(function (transition, i) {\n      var eventType = mutateEntryExit(transition.delay, i);\n      return __assign(__assign({}, transition), {\n        event: eventType\n      });\n    }) : flatten(Object.keys(afterConfig).map(function (delay, i) {\n      var configTransition = afterConfig[delay];\n      var resolvedTransition = isString(configTransition) ? {\n        target: configTransition\n      } : configTransition;\n      var resolvedDelay = !isNaN(+delay) ? +delay : delay;\n      var eventType = mutateEntryExit(resolvedDelay, i);\n      return toArray(resolvedTransition).map(function (transition) {\n        return __assign(__assign({}, transition), {\n          event: eventType,\n          delay: resolvedDelay\n        });\n      });\n    }));\n    return delayedTransitions.map(function (delayedTransition) {\n      var delay = delayedTransition.delay;\n      return __assign(__assign({}, _this.formatTransition(delayedTransition)), {\n        delay: delay\n      });\n    });\n  };\n  /**\r\n   * Returns the state nodes represented by the current state value.\r\n   *\r\n   * @param state The state value or State instance\r\n   */\n\n\n  StateNode.prototype.getStateNodes = function (state) {\n    var _a;\n\n    var _this = this;\n\n    if (!state) {\n      return [];\n    }\n\n    var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);\n\n    if (isString(stateValue)) {\n      var initialStateValue = this.getStateNode(stateValue).initial;\n      return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this, this.states[stateValue]];\n    }\n\n    var subStateKeys = Object.keys(stateValue);\n    var subStateNodes = [this];\n    subStateNodes.push.apply(subStateNodes, __spreadArray([], __read(flatten(subStateKeys.map(function (subStateKey) {\n      return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);\n    }))), false));\n    return subStateNodes;\n  };\n  /**\r\n   * Returns `true` if this state node explicitly handles the given event.\r\n   *\r\n   * @param event The event in question\r\n   */\n\n\n  StateNode.prototype.handles = function (event) {\n    var eventType = getEventType(event);\n    return this.events.includes(eventType);\n  };\n  /**\r\n   * Resolves the given `state` to a new `State` instance relative to this machine.\r\n   *\r\n   * This ensures that `.events` and `.nextEvents` represent the correct values.\r\n   *\r\n   * @param state The state to resolve\r\n   */\n\n\n  StateNode.prototype.resolveState = function (state) {\n    var stateFromConfig = state instanceof State ? state : State.create(state);\n    var configuration = Array.from(getConfiguration([], this.getStateNodes(stateFromConfig.value)));\n    return new State(__assign(__assign({}, stateFromConfig), {\n      value: this.resolve(stateFromConfig.value),\n      configuration: configuration,\n      done: isInFinalState(configuration, this),\n      tags: getTagsFromConfiguration(configuration),\n      machine: this.machine\n    }));\n  };\n\n  StateNode.prototype.transitionLeafNode = function (stateValue, state, _event) {\n    var stateNode = this.getStateNode(stateValue);\n    var next = stateNode.next(state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionCompoundNode = function (stateValue, state, _event) {\n    var subStateKeys = Object.keys(stateValue);\n    var stateNode = this.getStateNode(subStateKeys[0]);\n\n    var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionParallelNode = function (stateValue, state, _event) {\n    var e_2, _a;\n\n    var transitionMap = {};\n\n    try {\n      for (var _b = __values(Object.keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var subStateKey = _c.value;\n        var subStateValue = stateValue[subStateKey];\n\n        if (!subStateValue) {\n          continue;\n        }\n\n        var subStateNode = this.getStateNode(subStateKey);\n\n        var next = subStateNode._transition(subStateValue, state, _event);\n\n        if (next) {\n          transitionMap[subStateKey] = next;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    var stateTransitions = Object.keys(transitionMap).map(function (key) {\n      return transitionMap[key];\n    });\n    var enabledTransitions = flatten(stateTransitions.map(function (st) {\n      return st.transitions;\n    }));\n    var willTransition = stateTransitions.some(function (st) {\n      return st.transitions.length > 0;\n    });\n\n    if (!willTransition) {\n      return this.next(state, _event);\n    }\n\n    var entryNodes = flatten(stateTransitions.map(function (t) {\n      return t.entrySet;\n    }));\n    var configuration = flatten(Object.keys(transitionMap).map(function (key) {\n      return transitionMap[key].configuration;\n    }));\n    return {\n      transitions: enabledTransitions,\n      entrySet: entryNodes,\n      exitSet: flatten(stateTransitions.map(function (t) {\n        return t.exitSet;\n      })),\n      configuration: configuration,\n      source: state,\n      actions: flatten(Object.keys(transitionMap).map(function (key) {\n        return transitionMap[key].actions;\n      }))\n    };\n  };\n\n  StateNode.prototype._transition = function (stateValue, state, _event) {\n    // leaf node\n    if (isString(stateValue)) {\n      return this.transitionLeafNode(stateValue, state, _event);\n    } // hierarchical node\n\n\n    if (Object.keys(stateValue).length === 1) {\n      return this.transitionCompoundNode(stateValue, state, _event);\n    } // orthogonal node\n\n\n    return this.transitionParallelNode(stateValue, state, _event);\n  };\n\n  StateNode.prototype.getTransitionData = function (state, event) {\n    return this._transition(state.value, state, toSCXMLEvent(event));\n  };\n\n  StateNode.prototype.next = function (state, _event) {\n    var e_3, _a;\n\n    var _this = this;\n\n    var eventName = _event.name;\n    var actions = [];\n    var nextStateNodes = [];\n    var selectedTransition;\n\n    try {\n      for (var _b = __values(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var candidate = _c.value;\n        var cond = candidate.cond,\n            stateIn = candidate.in;\n        var resolvedContext = state.context;\n        var isInState = stateIn ? isString(stateIn) && isStateId(stateIn) ? // Check if in state by ID\n        state.matches(toStateValue(this.getStateNodeById(stateIn).path, this.delimiter)) : // Check if in state by relative grandparent\n        matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value)) : true;\n        var guardPassed = false;\n\n        try {\n          guardPassed = !cond || evaluateGuard(this.machine, cond, resolvedContext, _event, state);\n        } catch (err) {\n          throw new Error(\"Unable to evaluate guard '\".concat(cond.name || cond.type, \"' in transition for event '\").concat(eventName, \"' in state node '\").concat(this.id, \"':\\n\").concat(err.message));\n        }\n\n        if (guardPassed && isInState) {\n          if (candidate.target !== undefined) {\n            nextStateNodes = candidate.target;\n          }\n\n          actions.push.apply(actions, __spreadArray([], __read(candidate.actions), false));\n          selectedTransition = candidate;\n          break;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    if (!selectedTransition) {\n      return undefined;\n    }\n\n    if (!nextStateNodes.length) {\n      return {\n        transitions: [selectedTransition],\n        entrySet: [],\n        exitSet: [],\n        configuration: state.value ? [this] : [],\n        source: state,\n        actions: actions\n      };\n    }\n\n    var allNextStateNodes = flatten(nextStateNodes.map(function (stateNode) {\n      return _this.getRelativeStateNodes(stateNode, state.historyValue);\n    }));\n    var isInternal = !!selectedTransition.internal;\n    var reentryNodes = isInternal ? [] : flatten(allNextStateNodes.map(function (n) {\n      return _this.nodesFromChild(n);\n    }));\n    return {\n      transitions: [selectedTransition],\n      entrySet: reentryNodes,\n      exitSet: isInternal ? [] : [this],\n      configuration: allNextStateNodes,\n      source: state,\n      actions: actions\n    };\n  };\n\n  StateNode.prototype.nodesFromChild = function (childStateNode) {\n    if (childStateNode.escapes(this)) {\n      return [];\n    }\n\n    var nodes = [];\n    var marker = childStateNode;\n\n    while (marker && marker !== this) {\n      nodes.push(marker);\n      marker = marker.parent;\n    }\n\n    nodes.push(this); // inclusive\n\n    return nodes;\n  };\n  /**\r\n   * Whether the given state node \"escapes\" this state node. If the `stateNode` is equal to or the parent of\r\n   * this state node, it does not escape.\r\n   */\n\n\n  StateNode.prototype.escapes = function (stateNode) {\n    if (this === stateNode) {\n      return false;\n    }\n\n    var parent = this.parent;\n\n    while (parent) {\n      if (parent === stateNode) {\n        return false;\n      }\n\n      parent = parent.parent;\n    }\n\n    return true;\n  };\n\n  StateNode.prototype.getActions = function (transition, currentContext, _event, prevState) {\n    var e_4, _a, e_5, _b;\n\n    var prevConfig = getConfiguration([], prevState ? this.getStateNodes(prevState.value) : [this]);\n    var resolvedConfig = transition.configuration.length ? getConfiguration(prevConfig, transition.configuration) : prevConfig;\n\n    try {\n      for (var resolvedConfig_1 = __values(resolvedConfig), resolvedConfig_1_1 = resolvedConfig_1.next(); !resolvedConfig_1_1.done; resolvedConfig_1_1 = resolvedConfig_1.next()) {\n        var sn = resolvedConfig_1_1.value;\n\n        if (!has(prevConfig, sn)) {\n          transition.entrySet.push(sn);\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (resolvedConfig_1_1 && !resolvedConfig_1_1.done && (_a = resolvedConfig_1.return)) _a.call(resolvedConfig_1);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    try {\n      for (var prevConfig_1 = __values(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {\n        var sn = prevConfig_1_1.value;\n\n        if (!has(resolvedConfig, sn) || has(transition.exitSet, sn.parent)) {\n          transition.exitSet.push(sn);\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    var doneEvents = flatten(transition.entrySet.map(function (sn) {\n      var events = [];\n\n      if (sn.type !== 'final') {\n        return events;\n      }\n\n      var parent = sn.parent;\n\n      if (!parent.parent) {\n        return events;\n      }\n\n      events.push(done(sn.id, sn.doneData), // TODO: deprecate - final states should not emit done events for their own state.\n      done(parent.id, sn.doneData ? mapContext(sn.doneData, currentContext, _event) : undefined));\n      var grandparent = parent.parent;\n\n      if (grandparent.type === 'parallel') {\n        if (getChildren(grandparent).every(function (parentNode) {\n          return isInFinalState(transition.configuration, parentNode);\n        })) {\n          events.push(done(grandparent.id));\n        }\n      }\n\n      return events;\n    }));\n    transition.exitSet.sort(function (a, b) {\n      return b.order - a.order;\n    });\n    transition.entrySet.sort(function (a, b) {\n      return a.order - b.order;\n    });\n    var entryStates = new Set(transition.entrySet);\n    var exitStates = new Set(transition.exitSet);\n\n    var _c = __read([flatten(Array.from(entryStates).map(function (stateNode) {\n      return __spreadArray(__spreadArray([], __read(stateNode.activities.map(function (activity) {\n        return start(activity);\n      })), false), __read(stateNode.onEntry), false);\n    })).concat(doneEvents.map(raise)), flatten(Array.from(exitStates).map(function (stateNode) {\n      return __spreadArray(__spreadArray([], __read(stateNode.onExit), false), __read(stateNode.activities.map(function (activity) {\n        return stop(activity);\n      })), false);\n    }))], 2),\n        entryActions = _c[0],\n        exitActions = _c[1];\n\n    var actions = toActionObjects(exitActions.concat(transition.actions).concat(entryActions), this.machine.options.actions);\n    return actions;\n  };\n  /**\r\n   * Determines the next state given the current `state` and sent `event`.\r\n   *\r\n   * @param state The current State instance or state value\r\n   * @param event The event that was sent at the current state\r\n   * @param context The current context (extended state) of the current state\r\n   */\n\n\n  StateNode.prototype.transition = function (state, event, context) {\n    if (state === void 0) {\n      state = this.initialState;\n    }\n\n    var _event = toSCXMLEvent(event);\n\n    var currentState;\n\n    if (state instanceof State) {\n      currentState = context === undefined ? state : this.resolveState(State.from(state, context));\n    } else {\n      var resolvedStateValue = isString(state) ? this.resolve(pathToStateValue(this.getResolvedPath(state))) : this.resolve(state);\n      var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;\n      currentState = this.resolveState(State.from(resolvedStateValue, resolvedContext));\n    }\n\n    if (!IS_PRODUCTION && _event.name === WILDCARD) {\n      throw new Error(\"An event cannot have the wildcard type ('\".concat(WILDCARD, \"')\"));\n    }\n\n    if (this.strict) {\n      if (!this.events.includes(_event.name) && !isBuiltInEvent(_event.name)) {\n        throw new Error(\"Machine '\".concat(this.id, \"' does not accept event '\").concat(_event.name, \"'\"));\n      }\n    }\n\n    var stateTransition = this._transition(currentState.value, currentState, _event) || {\n      transitions: [],\n      configuration: [],\n      entrySet: [],\n      exitSet: [],\n      source: currentState,\n      actions: []\n    };\n    var prevConfig = getConfiguration([], this.getStateNodes(currentState.value));\n    var resolvedConfig = stateTransition.configuration.length ? getConfiguration(prevConfig, stateTransition.configuration) : prevConfig;\n    stateTransition.configuration = __spreadArray([], __read(resolvedConfig), false);\n    return this.resolveTransition(stateTransition, currentState, currentState.context, _event);\n  };\n\n  StateNode.prototype.resolveRaisedTransition = function (state, _event, originalEvent) {\n    var _a;\n\n    var currentActions = state.actions;\n    state = this.transition(state, _event); // Save original event to state\n    // TODO: this should be the raised event! Delete in V5 (breaking)\n\n    state._event = originalEvent;\n    state.event = originalEvent.data;\n\n    (_a = state.actions).unshift.apply(_a, __spreadArray([], __read(currentActions), false));\n\n    return state;\n  };\n\n  StateNode.prototype.resolveTransition = function (stateTransition, currentState, context, _event) {\n    var e_6, _a;\n\n    var _this = this;\n\n    if (_event === void 0) {\n      _event = initEvent;\n    }\n\n    var configuration = stateTransition.configuration; // Transition will \"apply\" if:\n    // - this is the initial state (there is no current state)\n    // - OR there are transitions\n\n    var willTransition = !currentState || stateTransition.transitions.length > 0;\n    var resolvedStateValue = willTransition ? getValue(this.machine, configuration) : undefined;\n    var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;\n    var actions = this.getActions(stateTransition, context, _event, currentState);\n    var activities = currentState ? __assign({}, currentState.activities) : {};\n\n    try {\n      for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {\n        var action = actions_1_1.value;\n\n        if (action.type === start$1) {\n          activities[action.activity.id || action.activity.type] = action;\n        } else if (action.type === stop$1) {\n          activities[action.activity.id || action.activity.type] = false;\n        }\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n\n    var _b = __read(resolveActions(this, currentState, context, _event, actions, this.machine.config.preserveActionOrder), 2),\n        resolvedActions = _b[0],\n        updatedContext = _b[1];\n\n    var _c = __read(partition(resolvedActions, function (action) {\n      return action.type === raise$1 || action.type === send && action.to === SpecialTargets.Internal;\n    }), 2),\n        raisedEvents = _c[0],\n        nonRaisedActions = _c[1];\n\n    var invokeActions = resolvedActions.filter(function (action) {\n      var _a;\n\n      return action.type === start$1 && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === invoke;\n    });\n    var children = invokeActions.reduce(function (acc, action) {\n      acc[action.activity.id] = createInvocableActor(action.activity, _this.machine, updatedContext, _event);\n      return acc;\n    }, currentState ? __assign({}, currentState.children) : {});\n    var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];\n    var isDone = isInFinalState(resolvedConfiguration, this);\n    var nextState = new State({\n      value: resolvedStateValue || currentState.value,\n      context: updatedContext,\n      _event: _event,\n      // Persist _sessionid between states\n      _sessionid: currentState ? currentState._sessionid : null,\n      historyValue: resolvedStateValue ? historyValue ? updateHistoryValue(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,\n      history: !resolvedStateValue || stateTransition.source ? currentState : undefined,\n      actions: resolvedStateValue ? nonRaisedActions : [],\n      activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},\n      events: [],\n      configuration: resolvedConfiguration,\n      transitions: stateTransition.transitions,\n      children: children,\n      done: isDone,\n      tags: currentState === null || currentState === void 0 ? void 0 : currentState.tags,\n      machine: this\n    });\n    var didUpdateContext = context !== updatedContext;\n    nextState.changed = _event.name === update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks\n\n    var history = nextState.history;\n\n    if (history) {\n      delete history.history;\n    } // There are transient transitions if the machine is not in a final state\n    // and if some of the state nodes have transient (\"always\") transitions.\n\n\n    var isTransient = !isDone && (this._transient || configuration.some(function (stateNode) {\n      return stateNode._transient;\n    })); // If there are no enabled transitions, check if there are transient transitions.\n    // If there are transient transitions, continue checking for more transitions\n    // because an transient transition should be triggered even if there are no\n    // enabled transitions.\n    //\n    // If we're already working on an transient transition (by checking\n    // if the event is a NULL_EVENT), then stop to prevent an infinite loop.\n    //\n    // Otherwise, if there are no enabled nor transient transitions, we are done.\n\n    if (!willTransition && (!isTransient || _event.name === NULL_EVENT)) {\n      return nextState;\n    }\n\n    var maybeNextState = nextState;\n\n    if (!isDone) {\n      if (isTransient) {\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, {\n          type: nullEvent\n        }, _event);\n      }\n\n      while (raisedEvents.length) {\n        var raisedEvent = raisedEvents.shift();\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event);\n      }\n    } // Detect if state changed\n\n\n    var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !stateValuesEqual(maybeNextState.value, history.value) : undefined);\n    maybeNextState.changed = changed; // Preserve original history after raised events\n\n    maybeNextState.history = history;\n    maybeNextState.tags = getTagsFromConfiguration(maybeNextState.configuration);\n    return maybeNextState;\n  };\n  /**\r\n   * Returns the child state node from its relative `stateKey`, or throws.\r\n   */\n\n\n  StateNode.prototype.getStateNode = function (stateKey) {\n    if (isStateId(stateKey)) {\n      return this.machine.getStateNodeById(stateKey);\n    }\n\n    if (!this.states) {\n      throw new Error(\"Unable to retrieve child state '\".concat(stateKey, \"' from '\").concat(this.id, \"'; no child states exist.\"));\n    }\n\n    var result = this.states[stateKey];\n\n    if (!result) {\n      throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n    }\n\n    return result;\n  };\n  /**\r\n   * Returns the state node with the given `stateId`, or throws.\r\n   *\r\n   * @param stateId The state ID. The prefix \"#\" is removed.\r\n   */\n\n\n  StateNode.prototype.getStateNodeById = function (stateId) {\n    var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;\n\n    if (resolvedStateId === this.id) {\n      return this;\n    }\n\n    var stateNode = this.machine.idMap[resolvedStateId];\n\n    if (!stateNode) {\n      throw new Error(\"Child state node '#\".concat(resolvedStateId, \"' does not exist on machine '\").concat(this.id, \"'\"));\n    }\n\n    return stateNode;\n  };\n  /**\r\n   * Returns the relative state node from the given `statePath`, or throws.\r\n   *\r\n   * @param statePath The string or string array relative path to the state node.\r\n   */\n\n\n  StateNode.prototype.getStateNodeByPath = function (statePath) {\n    if (typeof statePath === 'string' && isStateId(statePath)) {\n      try {\n        return this.getStateNodeById(statePath.slice(1));\n      } catch (e) {// try individual paths\n        // throw e;\n      }\n    }\n\n    var arrayStatePath = toStatePath(statePath, this.delimiter).slice();\n    var currentStateNode = this;\n\n    while (arrayStatePath.length) {\n      var key = arrayStatePath.shift();\n\n      if (!key.length) {\n        break;\n      }\n\n      currentStateNode = currentStateNode.getStateNode(key);\n    }\n\n    return currentStateNode;\n  };\n  /**\r\n   * Resolves a partial state value with its full representation in this machine.\r\n   *\r\n   * @param stateValue The partial state value to resolve.\r\n   */\n\n\n  StateNode.prototype.resolve = function (stateValue) {\n    var _a;\n\n    var _this = this;\n\n    if (!stateValue) {\n      return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties\n    }\n\n    switch (this.type) {\n      case 'parallel':\n        return mapValues(this.initialStateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;\n        });\n\n      case 'compound':\n        if (isString(stateValue)) {\n          var subStateNode = this.getStateNode(stateValue);\n\n          if (subStateNode.type === 'parallel' || subStateNode.type === 'compound') {\n            return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;\n          }\n\n          return stateValue;\n        }\n\n        if (!Object.keys(stateValue).length) {\n          return this.initialStateValue || {};\n        }\n\n        return mapValues(stateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;\n        });\n\n      default:\n        return stateValue || EMPTY_OBJECT;\n    }\n  };\n\n  StateNode.prototype.getResolvedPath = function (stateIdentifier) {\n    if (isStateId(stateIdentifier)) {\n      var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];\n\n      if (!stateNode) {\n        throw new Error(\"Unable to find state node '\".concat(stateIdentifier, \"'\"));\n      }\n\n      return stateNode.path;\n    }\n\n    return toStatePath(stateIdentifier, this.delimiter);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateValue\", {\n    get: function () {\n      var _a;\n\n      if (this.__cache.initialStateValue) {\n        return this.__cache.initialStateValue;\n      }\n\n      var initialStateValue;\n\n      if (this.type === 'parallel') {\n        initialStateValue = mapFilterValues(this.states, function (state) {\n          return state.initialStateValue || EMPTY_OBJECT;\n        }, function (stateNode) {\n          return !(stateNode.type === 'history');\n        });\n      } else if (this.initial !== undefined) {\n        if (!this.states[this.initial]) {\n          throw new Error(\"Initial state '\".concat(this.initial, \"' not found on '\").concat(this.key, \"'\"));\n        }\n\n        initialStateValue = isLeafNode(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);\n      } else {\n        // The finite state value of a machine without child states is just an empty object\n        initialStateValue = {};\n      }\n\n      this.__cache.initialStateValue = initialStateValue;\n      return this.__cache.initialStateValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.getInitialState = function (stateValue, context) {\n    this._init(); // TODO: this should be in the constructor (see note in constructor)\n\n\n    var configuration = this.getStateNodes(stateValue);\n    return this.resolveTransition({\n      configuration: configuration,\n      entrySet: configuration,\n      exitSet: [],\n      transitions: [],\n      source: undefined,\n      actions: []\n    }, undefined, context !== null && context !== void 0 ? context : this.machine.context, undefined);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialState\", {\n    /**\r\n     * The initial State instance, which includes all actions to be executed from\r\n     * entering the initial state.\r\n     */\n    get: function () {\n      var initialStateValue = this.initialStateValue;\n\n      if (!initialStateValue) {\n        throw new Error(\"Cannot retrieve initial state from simple state '\".concat(this.id, \"'.\"));\n      }\n\n      return this.getInitialState(initialStateValue);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"target\", {\n    /**\r\n     * The target state value of the history state node, if it exists. This represents the\r\n     * default state value to transition to if no history value exists yet.\r\n     */\n    get: function () {\n      var target;\n\n      if (this.type === 'history') {\n        var historyConfig = this.config;\n\n        if (isString(historyConfig.target)) {\n          target = isStateId(historyConfig.target) ? pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;\n        } else {\n          target = historyConfig.target;\n        }\n      }\n\n      return target;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the leaf nodes from a state path relative to this state node.\r\n   *\r\n   * @param relativeStateId The relative state path to retrieve the state nodes\r\n   * @param history The previous state to retrieve history\r\n   * @param resolve Whether state nodes should resolve to initial child state nodes\r\n   */\n\n  StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {\n    if (resolve === void 0) {\n      resolve = true;\n    }\n\n    return resolve ? relativeStateId.type === 'history' ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateNodes\", {\n    get: function () {\n      var _this = this;\n\n      if (isLeafNode(this)) {\n        return [this];\n      } // Case when state node is compound but no initial state is defined\n\n\n      if (this.type === 'compound' && !this.initial) {\n        if (!IS_PRODUCTION) {\n          warn(false, \"Compound state node '\".concat(this.id, \"' has no initial state.\"));\n        }\n\n        return [this];\n      }\n\n      var initialStateNodePaths = toStatePaths(this.initialStateValue);\n      return flatten(initialStateNodePaths.map(function (initialPath) {\n        return _this.getFromRelativePath(initialPath);\n      }));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Retrieves state nodes from a relative path to this state node.\r\n   *\r\n   * @param relativePath The relative path from this state node\r\n   * @param historyValue\r\n   */\n\n  StateNode.prototype.getFromRelativePath = function (relativePath) {\n    if (!relativePath.length) {\n      return [this];\n    }\n\n    var _a = __read(relativePath),\n        stateKey = _a[0],\n        childStatePath = _a.slice(1);\n\n    if (!this.states) {\n      throw new Error(\"Cannot retrieve subPath '\".concat(stateKey, \"' from node with no states\"));\n    }\n\n    var childStateNode = this.getStateNode(stateKey);\n\n    if (childStateNode.type === 'history') {\n      return childStateNode.resolveHistory();\n    }\n\n    if (!this.states[stateKey]) {\n      throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n    }\n\n    return this.states[stateKey].getFromRelativePath(childStatePath);\n  };\n\n  StateNode.prototype.historyValue = function (relativeStateValue) {\n    if (!Object.keys(this.states).length) {\n      return undefined;\n    }\n\n    return {\n      current: relativeStateValue || this.initialStateValue,\n      states: mapFilterValues(this.states, function (stateNode, key) {\n        if (!relativeStateValue) {\n          return stateNode.historyValue();\n        }\n\n        var subStateValue = isString(relativeStateValue) ? undefined : relativeStateValue[key];\n        return stateNode.historyValue(subStateValue || stateNode.initialStateValue);\n      }, function (stateNode) {\n        return !stateNode.history;\n      })\n    };\n  };\n  /**\r\n   * Resolves to the historical value(s) of the parent state node,\r\n   * represented by state nodes.\r\n   *\r\n   * @param historyValue\r\n   */\n\n\n  StateNode.prototype.resolveHistory = function (historyValue) {\n    var _this = this;\n\n    if (this.type !== 'history') {\n      return [this];\n    }\n\n    var parent = this.parent;\n\n    if (!historyValue) {\n      var historyTarget = this.target;\n      return historyTarget ? flatten(toStatePaths(historyTarget).map(function (relativeChildPath) {\n        return parent.getFromRelativePath(relativeChildPath);\n      })) : parent.initialStateNodes;\n    }\n\n    var subHistoryValue = nestedPath(parent.path, 'states')(historyValue).current;\n\n    if (isString(subHistoryValue)) {\n      return [parent.getStateNode(subHistoryValue)];\n    }\n\n    return flatten(toStatePaths(subHistoryValue).map(function (subStatePath) {\n      return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];\n    }));\n  };\n\n  Object.defineProperty(StateNode.prototype, \"stateIds\", {\n    /**\r\n     * All the state node IDs of this state node and its descendant state nodes.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var childStateIds = flatten(Object.keys(this.states).map(function (stateKey) {\n        return _this.states[stateKey].stateIds;\n      }));\n      return [this.id].concat(childStateIds);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"events\", {\n    /**\r\n     * All the event types accepted by this state node and its descendants.\r\n     */\n    get: function () {\n      var e_7, _a, e_8, _b;\n\n      if (this.__cache.events) {\n        return this.__cache.events;\n      }\n\n      var states = this.states;\n      var events = new Set(this.ownEvents);\n\n      if (states) {\n        try {\n          for (var _c = __values(Object.keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {\n            var stateId = _d.value;\n            var state = states[stateId];\n\n            if (state.states) {\n              try {\n                for (var _e = (e_8 = void 0, __values(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {\n                  var event_1 = _f.value;\n                  events.add(\"\".concat(event_1));\n                }\n              } catch (e_8_1) {\n                e_8 = {\n                  error: e_8_1\n                };\n              } finally {\n                try {\n                  if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                } finally {\n                  if (e_8) throw e_8.error;\n                }\n              }\n            }\n          }\n        } catch (e_7_1) {\n          e_7 = {\n            error: e_7_1\n          };\n        } finally {\n          try {\n            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n          } finally {\n            if (e_7) throw e_7.error;\n          }\n        }\n      }\n\n      return this.__cache.events = Array.from(events);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"ownEvents\", {\n    /**\r\n     * All the events that have transitions directly from this state node.\r\n     *\r\n     * Excludes any inert events.\r\n     */\n    get: function () {\n      var events = new Set(this.transitions.filter(function (transition) {\n        return !(!transition.target && !transition.actions.length && transition.internal);\n      }).map(function (transition) {\n        return transition.eventType;\n      }));\n      return Array.from(events);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.resolveTarget = function (_target) {\n    var _this = this;\n\n    if (_target === undefined) {\n      // an undefined target signals that the state node should not transition from that state when receiving that event\n      return undefined;\n    }\n\n    return _target.map(function (target) {\n      if (!isString(target)) {\n        return target;\n      }\n\n      var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,\n      // do not include machine key on target\n\n      if (isInternalTarget && !_this.parent) {\n        return _this.getStateNodeByPath(target.slice(1));\n      }\n\n      var resolvedTarget = isInternalTarget ? _this.key + target : target;\n\n      if (_this.parent) {\n        try {\n          var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);\n\n          return targetStateNode;\n        } catch (err) {\n          throw new Error(\"Invalid transition definition for state node '\".concat(_this.id, \"':\\n\").concat(err.message));\n        }\n      } else {\n        return _this.getStateNodeByPath(resolvedTarget);\n      }\n    });\n  };\n\n  StateNode.prototype.formatTransition = function (transitionConfig) {\n    var _this = this;\n\n    var normalizedTarget = normalizeTarget(transitionConfig.target);\n    var internal = 'internal' in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function (_target) {\n      return isString(_target) && _target[0] === _this.delimiter;\n    }) : true;\n    var guards = this.machine.options.guards;\n    var target = this.resolveTarget(normalizedTarget);\n\n    var transition = __assign(__assign({}, transitionConfig), {\n      actions: toActionObjects(toArray(transitionConfig.actions)),\n      cond: toGuard(transitionConfig.cond, guards),\n      target: target,\n      source: this,\n      internal: internal,\n      eventType: transitionConfig.event,\n      toJSON: function () {\n        return __assign(__assign({}, transition), {\n          target: transition.target ? transition.target.map(function (t) {\n            return \"#\".concat(t.id);\n          }) : undefined,\n          source: \"#\".concat(_this.id)\n        });\n      }\n    });\n\n    return transition;\n  };\n\n  StateNode.prototype.formatTransitions = function () {\n    var e_9, _a;\n\n    var _this = this;\n\n    var onConfig;\n\n    if (!this.config.on) {\n      onConfig = [];\n    } else if (Array.isArray(this.config.on)) {\n      onConfig = this.config.on;\n    } else {\n      var _b = this.config.on,\n          _c = WILDCARD,\n          _d = _b[_c],\n          wildcardConfigs = _d === void 0 ? [] : _d,\n          strictTransitionConfigs_1 = __rest(_b, [typeof _c === \"symbol\" ? _c : _c + \"\"]);\n\n      onConfig = flatten(Object.keys(strictTransitionConfigs_1).map(function (key) {\n        if (!IS_PRODUCTION && key === NULL_EVENT) {\n          warn(false, \"Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. \" + \"Please check the `on` configuration for \\\"#\".concat(_this.id, \"\\\".\"));\n        }\n\n        var transitionConfigArray = toTransitionConfigArray(key, strictTransitionConfigs_1[key]);\n\n        if (!IS_PRODUCTION) {\n          validateArrayifiedTransitions(_this, key, transitionConfigArray);\n        }\n\n        return transitionConfigArray;\n      }).concat(toTransitionConfigArray(WILDCARD, wildcardConfigs)));\n    }\n\n    var eventlessConfig = this.config.always ? toTransitionConfigArray('', this.config.always) : [];\n    var doneConfig = this.config.onDone ? toTransitionConfigArray(String(done(this.id)), this.config.onDone) : [];\n\n    if (!IS_PRODUCTION) {\n      warn(!(this.config.onDone && !this.parent), \"Root nodes cannot have an \\\".onDone\\\" transition. Please check the config of \\\"\".concat(this.id, \"\\\".\"));\n    }\n\n    var invokeConfig = flatten(this.invoke.map(function (invokeDef) {\n      var settleTransitions = [];\n\n      if (invokeDef.onDone) {\n        settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(doneInvoke(invokeDef.id)), invokeDef.onDone)), false));\n      }\n\n      if (invokeDef.onError) {\n        settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(error(invokeDef.id)), invokeDef.onError)), false));\n      }\n\n      return settleTransitions;\n    }));\n    var delayedTransitions = this.after;\n    var formattedTransitions = flatten(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(doneConfig), false), __read(invokeConfig), false), __read(onConfig), false), __read(eventlessConfig), false).map(function (transitionConfig) {\n      return toArray(transitionConfig).map(function (transition) {\n        return _this.formatTransition(transition);\n      });\n    }));\n\n    try {\n      for (var delayedTransitions_1 = __values(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {\n        var delayedTransition = delayedTransitions_1_1.value;\n        formattedTransitions.push(delayedTransition);\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n\n    return formattedTransitions;\n  };\n\n  return StateNode;\n}();\n\nexport { StateNode };\n"]},"metadata":{},"sourceType":"module"}