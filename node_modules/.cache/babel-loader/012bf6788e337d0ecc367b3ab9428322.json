{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _tslib = require('./_virtual/_tslib.js');\n\nvar utils = require('./utils.js');\n\nvar serviceScope = require('./serviceScope.js');\n\nfunction createNullActor(id) {\n  var _a;\n\n  return _a = {\n    id: id,\n    send: function () {\n      return void 0;\n    },\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    getSnapshot: function () {\n      return undefined;\n    },\n    toJSON: function () {\n      return {\n        id: id\n      };\n    }\n  }, _a[utils.symbolObservable] = function () {\n    return this;\n  }, _a;\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */\n\n\nfunction createInvocableActor(invokeDefinition, machine, context, _event) {\n  var _a;\n\n  var invokeSrc = utils.toInvokeSource(invokeDefinition.src);\n  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n  var resolvedData = invokeDefinition.data ? utils.mapContext(invokeDefinition.data, context, _event) : undefined;\n  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore\n\n  tempActor.meta = invokeDefinition;\n  return tempActor;\n}\n\nfunction createDeferredActor(entity, id, data) {\n  var tempActor = createNullActor(id); // @ts-ignore\n\n  tempActor.deferred = true;\n\n  if (utils.isMachine(entity)) {\n    // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n    var initialState_1 = tempActor.state = serviceScope.provide(undefined, function () {\n      return (data ? entity.withContext(data) : entity).initialState;\n    });\n\n    tempActor.getSnapshot = function () {\n      return initialState_1;\n    };\n  }\n\n  return tempActor;\n}\n\nfunction isActor(item) {\n  try {\n    return typeof item.send === 'function';\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isSpawnedActor(item) {\n  return isActor(item) && 'id' in item;\n} // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now\n\n\nfunction toActorRef(actorRefLike) {\n  var _a;\n\n  return _tslib.__assign((_a = {\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    id: 'anonymous',\n    getSnapshot: function () {\n      return undefined;\n    }\n  }, _a[utils.symbolObservable] = function () {\n    return this;\n  }, _a), actorRefLike);\n}\n\nexports.createDeferredActor = createDeferredActor;\nexports.createInvocableActor = createInvocableActor;\nexports.createNullActor = createNullActor;\nexports.isActor = isActor;\nexports.isSpawnedActor = isSpawnedActor;\nexports.toActorRef = toActorRef;","map":{"version":3,"sources":["C:/Users/Elnathan/node_modules/xstate/lib/Actor.js"],"names":["Object","defineProperty","exports","value","_tslib","require","utils","serviceScope","createNullActor","id","_a","send","subscribe","unsubscribe","getSnapshot","undefined","toJSON","symbolObservable","createInvocableActor","invokeDefinition","machine","context","_event","invokeSrc","toInvokeSource","src","serviceCreator","options","services","type","resolvedData","data","mapContext","tempActor","createDeferredActor","meta","entity","deferred","isMachine","initialState_1","state","provide","withContext","initialState","isActor","item","e","isSpawnedActor","toActorRef","actorRefLike","__assign"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar _tslib = require('./_virtual/_tslib.js');\nvar utils = require('./utils.js');\nvar serviceScope = require('./serviceScope.js');\n\nfunction createNullActor(id) {\n  var _a;\n\n  return _a = {\n    id: id,\n    send: function () {\n      return void 0;\n    },\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    getSnapshot: function () {\n      return undefined;\n    },\n    toJSON: function () {\n      return {\n        id: id\n      };\n    }\n  }, _a[utils.symbolObservable] = function () {\n    return this;\n  }, _a;\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */\n\nfunction createInvocableActor(invokeDefinition, machine, context, _event) {\n  var _a;\n\n  var invokeSrc = utils.toInvokeSource(invokeDefinition.src);\n  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n  var resolvedData = invokeDefinition.data ? utils.mapContext(invokeDefinition.data, context, _event) : undefined;\n  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore\n\n  tempActor.meta = invokeDefinition;\n  return tempActor;\n}\nfunction createDeferredActor(entity, id, data) {\n  var tempActor = createNullActor(id); // @ts-ignore\n\n  tempActor.deferred = true;\n\n  if (utils.isMachine(entity)) {\n    // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n    var initialState_1 = tempActor.state = serviceScope.provide(undefined, function () {\n      return (data ? entity.withContext(data) : entity).initialState;\n    });\n\n    tempActor.getSnapshot = function () {\n      return initialState_1;\n    };\n  }\n\n  return tempActor;\n}\nfunction isActor(item) {\n  try {\n    return typeof item.send === 'function';\n  } catch (e) {\n    return false;\n  }\n}\nfunction isSpawnedActor(item) {\n  return isActor(item) && 'id' in item;\n} // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now\n\nfunction toActorRef(actorRefLike) {\n  var _a;\n\n  return _tslib.__assign((_a = {\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    id: 'anonymous',\n    getSnapshot: function () {\n      return undefined;\n    }\n  }, _a[utils.symbolObservable] = function () {\n    return this;\n  }, _a), actorRefLike);\n}\n\nexports.createDeferredActor = createDeferredActor;\nexports.createInvocableActor = createInvocableActor;\nexports.createNullActor = createNullActor;\nexports.isActor = isActor;\nexports.isSpawnedActor = isSpawnedActor;\nexports.toActorRef = toActorRef;\n"]},"metadata":{},"sourceType":"script"}