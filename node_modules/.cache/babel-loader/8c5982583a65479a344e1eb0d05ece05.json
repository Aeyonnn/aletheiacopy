{"ast":null,"code":"import { __assign, __read, __spreadArray } from './_virtual/_tslib.js';\nimport { SpecialTargets, ActionTypes } from './types.js';\nimport { init, send as send$1, raise as raise$1, update, log as log$1, cancel as cancel$1, assign as assign$1, error as error$1, stop as stop$1, pure as pure$1, choose as choose$1 } from './actionTypes.js';\nimport * as actionTypes from './actionTypes.js';\nexport { actionTypes };\nimport { toSCXMLEvent, isString, isFunction, toEventObject, getEventType, partition, updateContext, flatten, toArray, toGuard, evaluateGuard, warn, isArray } from './utils.js';\nimport { IS_PRODUCTION } from './environment.js';\nvar initEvent = /*#__PURE__*/toSCXMLEvent({\n  type: init\n});\n\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\n\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n\n  if (isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = __assign(__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var actionType = exec.type || action.type;\n      actionObject = __assign(__assign(__assign({}, exec), action), {\n        type: actionType\n      });\n    } else {\n      actionObject = action;\n    }\n  }\n\n  return actionObject;\n}\n\nvar toActionObjects = function (action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n\n  var actions = isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\n\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return __assign(__assign({\n    id: isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\n\nfunction raise(event) {\n  if (!isString(event)) {\n    return send(event, {\n      to: SpecialTargets.Internal\n    });\n  }\n\n  return {\n    type: raise$1,\n    event: event\n  };\n}\n\nfunction resolveRaise(action) {\n  return {\n    type: raise$1,\n    _event: toSCXMLEvent(action.event)\n  };\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: send$1,\n    event: isFunction(event) ? event : toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options && options.id !== undefined ? options.id : isFunction(event) ? event.name : getEventType(event)\n  };\n}\n\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  var resolvedTarget = isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return __assign(__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\n\nfunction sendParent(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */\n\n\nfunction sendTo(actor, event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: actor\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\n\nfunction sendUpdate() {\n  return sendParent(update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\n\nfunction respond(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: function (_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function (context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n\n  return {\n    type: log$1,\n    label: label,\n    expr: expr\n  };\n}\n\nvar resolveLog = function (action, ctx, _event) {\n  return __assign(__assign({}, action), {\n    value: isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\n\nvar cancel = function (sendId) {\n  return {\n    type: cancel$1,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */\n\n\nfunction stop(actorRef) {\n  var activity = isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);\n  return {\n    type: ActionTypes.Stop,\n    activity: activity,\n    exec: undefined\n  };\n}\n\nfunction resolveStop(action, context, _event) {\n  var actorRefOrString = isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;\n  var resolvedActorRef = typeof actorRefOrString === 'string' ? {\n    id: actorRefOrString\n  } : actorRefOrString;\n  var actionObject = {\n    type: ActionTypes.Stop,\n    activity: resolvedActorRef\n  };\n  return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\n\nvar assign = function (assignment) {\n  return {\n    type: assign$1,\n    assignment: assignment\n  };\n};\n\nfunction isActionObject(action) {\n  return typeof action === 'object' && 'type' in action;\n}\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\".concat(id) : '';\n  return \"\".concat(ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\n\nfunction done(id, data) {\n  var type = \"\".concat(ActionTypes.DoneState, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\n\nfunction doneInvoke(id, data) {\n  var type = \"\".concat(ActionTypes.DoneInvoke, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n\nfunction error(id, data) {\n  var type = \"\".concat(ActionTypes.ErrorPlatform, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n\nfunction pure(getActions) {\n  return {\n    type: ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\n\nfunction forwardTo(target, options) {\n  return send(function (_, event) {\n    return event;\n  }, __assign(__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: error$1,\n      data: isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n\nfunction choose(conds) {\n  return {\n    type: ActionTypes.Choose,\n    conds: conds\n  };\n}\n\nfunction resolveActions(machine, currentState, currentContext, _event, actions, preserveActionOrder) {\n  if (preserveActionOrder === void 0) {\n    preserveActionOrder = false;\n  }\n\n  var _a = __read(preserveActionOrder ? [[], actions] : partition(actions, function (action) {\n    return action.type === assign$1;\n  }), 2),\n      assignActions = _a[0],\n      otherActions = _a[1];\n\n  var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;\n  var resolvedActions = flatten(otherActions.map(function (actionObject) {\n    var _a;\n\n    switch (actionObject.type) {\n      case raise$1:\n        return resolveRaise(actionObject);\n\n      case send$1:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!IS_PRODUCTION) {\n          // warn after resolving as we can create better contextual message here\n          warn(!isString(actionObject.delay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\".concat(actionObject.delay, \"' was found on machine '\").concat(machine.id, \"'\"));\n        }\n\n        return sendAction;\n\n      case log$1:\n        return resolveLog(actionObject, updatedContext, _event);\n\n      case choose$1:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = toGuard(condition.cond, machine.options.guards);\n            return !guard || evaluateGuard(machine, guard, updatedContext, _event, currentState);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _b = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), preserveActionOrder), 2),\n              resolvedActionsFromChoose = _b[0],\n              resolvedContextFromChoose = _b[1];\n\n          updatedContext = resolvedContextFromChoose;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromChoose;\n        }\n\n      case pure$1:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _c = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), preserveActionOrder), 2),\n              resolvedActionsFromPure = _c[0],\n              resolvedContext = _c[1];\n\n          updatedContext = resolvedContext;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromPure;\n        }\n\n      case stop$1:\n        {\n          return resolveStop(actionObject, updatedContext, _event);\n        }\n\n      case assign$1:\n        {\n          updatedContext = updateContext(updatedContext, _event, [actionObject], currentState);\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          break;\n        }\n\n      default:\n        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n        var exec_1 = resolvedActionObject.exec;\n\n        if (exec_1 && preservedContexts) {\n          var contextIndex_1 = preservedContexts.length - 1;\n          resolvedActionObject = __assign(__assign({}, resolvedActionObject), {\n            exec: function (_ctx) {\n              var args = [];\n\n              for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n              }\n\n              exec_1.apply(void 0, __spreadArray([preservedContexts[contextIndex_1]], __read(args), false));\n            }\n          });\n        }\n\n        return resolvedActionObject;\n    }\n  }).filter(function (a) {\n    return !!a;\n  }));\n  return [resolvedActions, updatedContext];\n}\n\nexport { after, assign, cancel, choose, done, doneInvoke, error, escalate, forwardTo, getActionFunction, initEvent, isActionObject, log, pure, raise, resolveActions, resolveLog, resolveRaise, resolveSend, resolveStop, respond, send, sendParent, sendTo, sendUpdate, start, stop, toActionObject, toActionObjects, toActivityDefinition };","map":{"version":3,"sources":["C:/Users/Elnathan/node_modules/xstate/es/actions.js"],"names":["__assign","__read","__spreadArray","SpecialTargets","ActionTypes","init","send","send$1","raise","raise$1","update","log","log$1","cancel","cancel$1","assign","assign$1","error","error$1","stop","stop$1","pure","pure$1","choose","choose$1","actionTypes","toSCXMLEvent","isString","isFunction","toEventObject","getEventType","partition","updateContext","flatten","toArray","toGuard","evaluateGuard","warn","isArray","IS_PRODUCTION","initEvent","type","getActionFunction","actionType","actionFunctionMap","undefined","toActionObject","action","actionObject","exec","name","toString","toActionObjects","actions","map","subAction","toActivityDefinition","id","event","to","Internal","resolveRaise","_event","options","delay","resolveSend","ctx","delaysMap","meta","resolvedEvent","data","resolvedDelay","configDelay","resolvedTarget","sendParent","Parent","sendTo","actor","sendUpdate","respond","_","__","_a","origin","defaultLogExpr","context","expr","label","resolveLog","value","sendId","start","activity","activityDef","Start","actorRef","Stop","resolveStop","actorRefOrString","resolvedActorRef","assignment","isActionObject","after","delayRef","idSuffix","concat","After","done","DoneState","eventObject","doneInvoke","DoneInvoke","ErrorPlatform","getActions","Pure","get","forwardTo","target","escalate","errorData","conds","Choose","resolveActions","machine","currentState","currentContext","preserveActionOrder","assignActions","otherActions","updatedContext","length","preservedContexts","resolvedActions","sendAction","delays","chooseAction","matchedActions","find","condition","guard","cond","guards","_b","resolvedActionsFromChoose","resolvedContextFromChoose","push","_c","resolvedActionsFromPure","resolvedContext","resolvedActionObject","exec_1","contextIndex_1","_ctx","args","_i","arguments","apply","filter","a"],"mappings":"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","sourcesContent":["import { __assign, __read, __spreadArray } from './_virtual/_tslib.js';\nimport { SpecialTargets, ActionTypes } from './types.js';\nimport { init, send as send$1, raise as raise$1, update, log as log$1, cancel as cancel$1, assign as assign$1, error as error$1, stop as stop$1, pure as pure$1, choose as choose$1 } from './actionTypes.js';\nimport * as actionTypes from './actionTypes.js';\nexport { actionTypes };\nimport { toSCXMLEvent, isString, isFunction, toEventObject, getEventType, partition, updateContext, flatten, toArray, toGuard, evaluateGuard, warn, isArray } from './utils.js';\nimport { IS_PRODUCTION } from './environment.js';\n\nvar initEvent = /*#__PURE__*/toSCXMLEvent({\n  type: init\n});\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n\n  if (isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = __assign(__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var actionType = exec.type || action.type;\n      actionObject = __assign(__assign(__assign({}, exec), action), {\n        type: actionType\n      });\n    } else {\n      actionObject = action;\n    }\n  }\n\n  return actionObject;\n}\nvar toActionObjects = function (action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n\n  var actions = isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return __assign(__assign({\n    id: isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\nfunction raise(event) {\n  if (!isString(event)) {\n    return send(event, {\n      to: SpecialTargets.Internal\n    });\n  }\n\n  return {\n    type: raise$1,\n    event: event\n  };\n}\nfunction resolveRaise(action) {\n  return {\n    type: raise$1,\n    _event: toSCXMLEvent(action.event)\n  };\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: send$1,\n    event: isFunction(event) ? event : toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options && options.id !== undefined ? options.id : isFunction(event) ? event.name : getEventType(event)\n  };\n}\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  var resolvedTarget = isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return __assign(__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\nfunction sendParent(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */\n\nfunction sendTo(actor, event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: actor\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\nfunction sendUpdate() {\n  return sendParent(update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\nfunction respond(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: function (_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function (context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n\n  return {\n    type: log$1,\n    label: label,\n    expr: expr\n  };\n}\nvar resolveLog = function (action, ctx, _event) {\n  return __assign(__assign({}, action), {\n    value: isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\nvar cancel = function (sendId) {\n  return {\n    type: cancel$1,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */\n\nfunction stop(actorRef) {\n  var activity = isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);\n  return {\n    type: ActionTypes.Stop,\n    activity: activity,\n    exec: undefined\n  };\n}\nfunction resolveStop(action, context, _event) {\n  var actorRefOrString = isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;\n  var resolvedActorRef = typeof actorRefOrString === 'string' ? {\n    id: actorRefOrString\n  } : actorRefOrString;\n  var actionObject = {\n    type: ActionTypes.Stop,\n    activity: resolvedActorRef\n  };\n  return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\nvar assign = function (assignment) {\n  return {\n    type: assign$1,\n    assignment: assignment\n  };\n};\nfunction isActionObject(action) {\n  return typeof action === 'object' && 'type' in action;\n}\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\".concat(id) : '';\n  return \"\".concat(ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\nfunction done(id, data) {\n  var type = \"\".concat(ActionTypes.DoneState, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\nfunction doneInvoke(id, data) {\n  var type = \"\".concat(ActionTypes.DoneInvoke, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\nfunction error(id, data) {\n  var type = \"\".concat(ActionTypes.ErrorPlatform, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\nfunction pure(getActions) {\n  return {\n    type: ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction forwardTo(target, options) {\n  return send(function (_, event) {\n    return event;\n  }, __assign(__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: error$1,\n      data: isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\nfunction choose(conds) {\n  return {\n    type: ActionTypes.Choose,\n    conds: conds\n  };\n}\nfunction resolveActions(machine, currentState, currentContext, _event, actions, preserveActionOrder) {\n  if (preserveActionOrder === void 0) {\n    preserveActionOrder = false;\n  }\n\n  var _a = __read(preserveActionOrder ? [[], actions] : partition(actions, function (action) {\n    return action.type === assign$1;\n  }), 2),\n      assignActions = _a[0],\n      otherActions = _a[1];\n\n  var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;\n  var resolvedActions = flatten(otherActions.map(function (actionObject) {\n    var _a;\n\n    switch (actionObject.type) {\n      case raise$1:\n        return resolveRaise(actionObject);\n\n      case send$1:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!IS_PRODUCTION) {\n          // warn after resolving as we can create better contextual message here\n          warn(!isString(actionObject.delay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\".concat(actionObject.delay, \"' was found on machine '\").concat(machine.id, \"'\"));\n        }\n\n        return sendAction;\n\n      case log$1:\n        return resolveLog(actionObject, updatedContext, _event);\n\n      case choose$1:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = toGuard(condition.cond, machine.options.guards);\n            return !guard || evaluateGuard(machine, guard, updatedContext, _event, currentState);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _b = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), preserveActionOrder), 2),\n              resolvedActionsFromChoose = _b[0],\n              resolvedContextFromChoose = _b[1];\n\n          updatedContext = resolvedContextFromChoose;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromChoose;\n        }\n\n      case pure$1:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _c = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), preserveActionOrder), 2),\n              resolvedActionsFromPure = _c[0],\n              resolvedContext = _c[1];\n\n          updatedContext = resolvedContext;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromPure;\n        }\n\n      case stop$1:\n        {\n          return resolveStop(actionObject, updatedContext, _event);\n        }\n\n      case assign$1:\n        {\n          updatedContext = updateContext(updatedContext, _event, [actionObject], currentState);\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          break;\n        }\n\n      default:\n        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n        var exec_1 = resolvedActionObject.exec;\n\n        if (exec_1 && preservedContexts) {\n          var contextIndex_1 = preservedContexts.length - 1;\n          resolvedActionObject = __assign(__assign({}, resolvedActionObject), {\n            exec: function (_ctx) {\n              var args = [];\n\n              for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n              }\n\n              exec_1.apply(void 0, __spreadArray([preservedContexts[contextIndex_1]], __read(args), false));\n            }\n          });\n        }\n\n        return resolvedActionObject;\n    }\n  }).filter(function (a) {\n    return !!a;\n  }));\n  return [resolvedActions, updatedContext];\n}\n\nexport { after, assign, cancel, choose, done, doneInvoke, error, escalate, forwardTo, getActionFunction, initEvent, isActionObject, log, pure, raise, resolveActions, resolveLog, resolveRaise, resolveSend, resolveStop, respond, send, sendParent, sendTo, sendUpdate, start, stop, toActionObject, toActionObjects, toActivityDefinition };\n"]},"metadata":{},"sourceType":"module"}